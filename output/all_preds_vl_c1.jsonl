{"model_name_or_path": "agentless", "instance_id": "networkx__networkx-4378", "model_patch": "diff --git a/networkx/drawing/nx_pylab.py b/networkx/drawing/nx_pylab.py\nindex 306bca5..b20d1b5 100644\n--- a/networkx/drawing/nx_pylab.py\n+++ b/networkx/drawing/nx_pylab.py\n@@ -633,6 +633,8 @@ def draw_networkx_edges(\n \n     if nodelist is None:\n         nodelist = list(G.nodes())\n+    else:\n+        edgelist = [e for e in edgelist if e[0] in nodelist and e[1] in nodelist]\n \n     # FancyArrowPatch handles color=None different from LineCollection\n     if edge_color is None:\n"}
{"model_name_or_path": "agentless", "instance_id": "mwaskom__seaborn-3276", "model_patch": "diff --git a/seaborn/matrix.py b/seaborn/matrix.py\nindex d9b79f4..b32ef7c 100644\n--- a/seaborn/matrix.py\n+++ b/seaborn/matrix.py\n@@ -299,8 +299,9 @@ class _HeatMapper:\n         # setting vmin/vmax in addition to norm is deprecated\n         # so avoid setting if norm is set\n         if \"norm\" not in kws:\n-            kws.setdefault(\"vmin\", self.vmin)\n-            kws.setdefault(\"vmax\", self.vmax)\n+            if self.vmin is not None and self.vmax is not None:\n+                kws.setdefault(\"vmin\", self.vmin)\n+                kws.setdefault(\"vmax\", self.vmax)\n \n         # Draw the heatmap\n         mesh = ax.pcolormesh(self.plot_data, cmap=self.cmap, **kws)\n"}
