[
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-20584",
        "base_commit": "06141dab06373d0cb2806b3aa87ca621fbf5c426",
        "patch": "diff --git a/lib/matplotlib/collections.py b/lib/matplotlib/collections.py\n--- a/lib/matplotlib/collections.py\n+++ b/lib/matplotlib/collections.py\n@@ -1461,7 +1461,14 @@ def get_segments(self):\n         segments = []\n \n         for path in self._paths:\n-            vertices = [vertex for vertex, _ in path.iter_segments()]\n+            vertices = [\n+                vertex\n+                for vertex, _\n+                # Never simplify here, we want to get the data-space values\n+                # back and there in no way to know the \"right\" simplification\n+                # threshold so never try.\n+                in path.iter_segments(simplify=False)\n+            ]\n             vertices = np.asarray(vertices)\n             segments.append(vertices)\n \n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_collections.py b/lib/matplotlib/tests/test_collections.py\n--- a/lib/matplotlib/tests/test_collections.py\n+++ b/lib/matplotlib/tests/test_collections.py\n@@ -1039,3 +1039,12 @@ def test_quadmesh_cursor_data():\n         x, y = ax.transData.transform([-1, 101])\n         event = MouseEvent('motion_notify_event', fig.canvas, x, y)\n         assert qm.get_cursor_data(event) is None\n+\n+\n+def test_get_segments():\n+    segments = np.tile(np.linspace(0, 1, 256), (2, 1)).T\n+    lc = LineCollection([segments])\n+\n+    readback, = lc.get_segments()\n+    # these should comeback un-changed!\n+    assert np.all(segments == readback)\n",
        "problem_statement": "set_segments(get_segments()) makes lines coarse\nAfter plotting with `contourf`, I would like to retrieve the lines and manipulate them. Unfortunately, I noticed that the result is much coarser than without manipulation. In fact, a simple `lc.set_segments(lc.get_segments())` has this effect. I would have expected this does nothing at all.\r\n\r\nMWE:\r\n```python\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\nx = np.linspace(-1.1, 1.1, 100)\r\ny = np.linspace(-1.1, 1.1, 100)\r\n\r\nX, Y = np.meshgrid(x, y)\r\nZ = X ** 2 + Y ** 2\r\n\r\nc = plt.contour(X, Y, Z, levels=[1.0], colors=\"k\")\r\n\r\n# reset segments\r\nlc = c.collections[0]\r\nsegments = lc.get_segments()\r\nlc.set_segments(segments)\r\n\r\nplt.gca().set_aspect(\"equal\")\r\nplt.show()\r\n```\r\n\r\n|  This image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image shows a smooth, continuous circle plotted on a Cartesian coordinate system. The x-axis ranges from -1.0 to 1.0, and the y-axis also ranges from -1.0 to 1.0. The circle is centered at the origin (0,0) and has a radius of 1.0. The plot appears to be a result of a contour plot with a single level at 1.0, as indicated by the smooth and unbroken line that forms the circle.\n- **Analysis**: \nThis image demonstrates the expected smooth circle contour plot before any manipulation of the contour lines. It shows the issue context of a smooth contour plot generated using matplotlib's `contourf` function. The image captures the baseline appearance of the contour plot, which should remain unchanged after any manipulation. Including this image is necessary to establish the expected behavior and to compare it with the result after the problematic manipulation. Key technical details revealed include the smoothness and continuity of the contour lines, which are crucial for understanding the issue. The image strengthens the issue documentation by providing a visual reference of the expected outcome. Developers should focus on the smoothness and continuity of the contour lines when reviewing this image.\n--- | This image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 2\n- **Contextual Description**: \nThe image displays a circle that appears to be composed of straight line segments, giving it a polygonal shape rather than a smooth curve. The x-axis ranges from -1.0 to 1.0, and the y-axis also ranges from -1.0 to 1.0, similar to the first image. The circle is centered at the origin (0,0) and has a radius of 1.0. This plot seems to be the result of a contour plot with a single level at 1.0, but after manipulating the segments of the line, leading to a coarser and less smooth appearance compared to the first image.\n- **Analysis**: \nThis image demonstrates the issue of coarse contour lines after manipulating the segments of the contour plot. It shows the unexpected result of the contour plot after calling `lc.set_segments(lc.get_segments())`, which should theoretically have no effect. The image captures the problem context of the contour lines becoming coarser and losing their smoothness. Including this image is necessary to illustrate the issue and to compare it with the expected smooth contour plot. Key technical details revealed include the coarseness and discontinuity of the contour lines, which are crucial for understanding the issue. The image strengthens the issue documentation by providing a visual reference of the problematic outcome. Developers should focus on the coarseness and discontinuity of the contour lines when reviewing this image.\n--- |\r\n| ------- | ------- |\r\n| default | with reset segments |\r\n\r\nThis is with mpl 3.4.2.\n\n### Issue Summary (Structured)\n- **problemSummary**: The user reports that after plotting with `contourf` and retrieving the lines to manipulate them, the result is much coarser than without manipulation. A simple `lc.set_segments(lc.get_segments())` causes this effect, which the user did not expect.\n- **context**: The issue occurs with matplotlib version 3.4.2.\n- **stepsToReproduce**: ['Plot a contour using `contourf`.', 'Retrieving the lines and manipulating them.', 'Reset the segments using `lc.set_segments(lc.get_segments())`.']\n- **expectedResults**: The contour plot should remain unchanged after resetting the segments.\n- **actualResults**: The contour plot becomes coarser after resetting the segments.\n- **supplementaryImages**: ['The first image shows the default contour plot.', 'The second image shows the contour plot after resetting the segments.']\n- **additionalNotes**: The contour plot becomes coarser than the original plot.",
        "hints_text": "Aha: There is\r\n```\r\nc.allsegs\r\n```\r\nwhich can be manipulated instead.\nHi @nschloe, has your problem been resolved?\nInteresting between 3.4.2 and the default branch this has changed from a `LineCollection` to a `PathCollection` which notable does not even _have_ a `get_segments`.\n`get_segments()` was wrong apparently, so problem solved for me.\n@nschloe You identified a _different_ bug which is why does `lc.get_segments()` aggressively simplify the curve ?!\r\n\r\nInternally all `Collection` flavors boil down to calling `renderer.draw_path_collection` and all of the sub-classes primarily provide nicer user-facing APIs to fabricate the paths that will be passed down to the renderer.  In `LineCollection` rather than tracking both the user supplied data and the internal `Path` objects, we just keep the `Path` objects and re-extract segments on demand.  To do this we use `Path.iter_segments` with defaults to asking the path if it should simplify the path (that is drop points that do not matter which is in turn defined by if the deflection away from \"straight\" is greater than some threshold).  The `Path` objects we are holding have values in data-space, but the default value of \"should simplify\" and \"what is the threshold for 'not mattering'\" are both set so that they make sense once the path has been converted to pixel space (`True` and `1/9`).  In `LineCollection.get_segments` we are not passing anything special so we are cleaning the path to only include points that make the path deviate by ~0.1111 (which eye-balling looks about right).  I think the fix here is to pass `simplify=False` in `LineColleciton.get_segments()`.\nAnd the change from LineCollection -> PathCollection was 04f4bb6d1206d283a572f108e95ecec1a47123ca and is justified.",
        "created_at": "2021-07-06T19:51:52Z",
        "version": "3.4",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_collections.py::test_get_segments\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_collections.py::test__EventCollection__get_props[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__get_props[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_positions[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_positions[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__add_positions[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__add_positions[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__append_positions[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__append_positions[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__extend_positions[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__extend_positions[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__switch_orientation[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__switch_orientation[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__switch_orientation_2x[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__switch_orientation_2x[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_orientation[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_orientation[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_linelength[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_linelength[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_lineoffset[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_lineoffset[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_prop[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_prop[pdf]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_color[png]\", \"lib/matplotlib/tests/test_collections.py::test__EventCollection__set_color[pdf]\", \"lib/matplotlib/tests/test_collections.py::test_null_collection_datalim\", \"lib/matplotlib/tests/test_collections.py::test_add_collection\", \"lib/matplotlib/tests/test_collections.py::test_collection_log_datalim[png]\", \"lib/matplotlib/tests/test_collections.py::test_quiver_limits\", \"lib/matplotlib/tests/test_collections.py::test_barb_limits\", \"lib/matplotlib/tests/test_collections.py::test_EllipseCollection[png]\", \"lib/matplotlib/tests/test_collections.py::test_polycollection_close[png]\", \"lib/matplotlib/tests/test_collections.py::test_regularpolycollection_rotate[png]\", \"lib/matplotlib/tests/test_collections.py::test_regularpolycollection_scale[png]\", \"lib/matplotlib/tests/test_collections.py::test_picking\", \"lib/matplotlib/tests/test_collections.py::test_linestyle_single_dashes\", \"lib/matplotlib/tests/test_collections.py::test_size_in_xy[png]\", \"lib/matplotlib/tests/test_collections.py::test_pandas_indexing\", \"lib/matplotlib/tests/test_collections.py::test_lslw_bcast\", \"lib/matplotlib/tests/test_collections.py::test_capstyle\", \"lib/matplotlib/tests/test_collections.py::test_joinstyle\", \"lib/matplotlib/tests/test_collections.py::test_cap_and_joinstyle_image[png]\", \"lib/matplotlib/tests/test_collections.py::test_scatter_post_alpha[png]\", \"lib/matplotlib/tests/test_collections.py::test_scatter_alpha_array\", \"lib/matplotlib/tests/test_collections.py::test_pathcollection_legend_elements\", \"lib/matplotlib/tests/test_collections.py::test_EventCollection_nosort\", \"lib/matplotlib/tests/test_collections.py::test_collection_set_verts_array\", \"lib/matplotlib/tests/test_collections.py::test_collection_set_array\", \"lib/matplotlib/tests/test_collections.py::test_blended_collection_autolim\", \"lib/matplotlib/tests/test_collections.py::test_singleton_autolim\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_deprecated_signature[png-True-kwargs0]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_deprecated_signature[png-False-kwargs1]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_deprecated_signature[png-True-kwargs2]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_deprecated_signature[png-False-kwargs3]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_deprecated_positional[png]\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_set_array_validation\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_get_coordinates\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_set_array\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_vmin_vmax\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_alpha_array\", \"lib/matplotlib/tests/test_collections.py::test_alpha_validation\", \"lib/matplotlib/tests/test_collections.py::test_legend_inverse_size_label_relationship\", \"lib/matplotlib/tests/test_collections.py::test_color_logic[pcolor]\", \"lib/matplotlib/tests/test_collections.py::test_color_logic[pcolormesh]\", \"lib/matplotlib/tests/test_collections.py::test_LineCollection_args\", \"lib/matplotlib/tests/test_collections.py::test_array_wrong_dimensions\", \"lib/matplotlib/tests/test_collections.py::test_quadmesh_cursor_data\"]",
        "environment_setup_commit": "f93c0a3dcb82feed0262d758626c90d4002685f3"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-23412",
        "base_commit": "f06c2c3abdaf4b90285ce5ca7fedbb8ace715911",
        "patch": "diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py\n--- a/lib/matplotlib/patches.py\n+++ b/lib/matplotlib/patches.py\n@@ -586,9 +586,8 @@ def draw(self, renderer):\n         # docstring inherited\n         if not self.get_visible():\n             return\n-        # Patch has traditionally ignored the dashoffset.\n-        with cbook._setattr_cm(\n-                 self, _dash_pattern=(0, self._dash_pattern[1])), \\\n+\n+        with cbook._setattr_cm(self, _dash_pattern=(self._dash_pattern)), \\\n              self._bind_draw_path_function(renderer) as draw_path:\n             path = self.get_path()\n             transform = self.get_transform()\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_patches.py b/lib/matplotlib/tests/test_patches.py\n--- a/lib/matplotlib/tests/test_patches.py\n+++ b/lib/matplotlib/tests/test_patches.py\n@@ -149,6 +149,40 @@ def test_rotate_rect_draw(fig_test, fig_ref):\n     assert rect_test.get_angle() == angle\n \n \n+@check_figures_equal(extensions=['png'])\n+def test_dash_offset_patch_draw(fig_test, fig_ref):\n+    ax_test = fig_test.add_subplot()\n+    ax_ref = fig_ref.add_subplot()\n+\n+    loc = (0.1, 0.1)\n+    width, height = (0.8, 0.8)\n+    rect_ref = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                                                linestyle=(0, [6, 6]))\n+    # fill the line gaps using a linestyle (0, [0, 6, 6, 0]), which is\n+    # equivalent to (6, [6, 6]) but has 0 dash offset\n+    rect_ref2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                            linestyle=(0, [0, 6, 6, 0]))\n+    assert rect_ref.get_linestyle() == (0, [6, 6])\n+    assert rect_ref2.get_linestyle() == (0, [0, 6, 6, 0])\n+\n+    ax_ref.add_patch(rect_ref)\n+    ax_ref.add_patch(rect_ref2)\n+\n+    # Check that the dash offset of the rect is the same if we pass it in the\n+    # init method and if we create two rects with appropriate onoff sequence\n+    # of linestyle.\n+\n+    rect_test = Rectangle(loc, width, height, linewidth=3, edgecolor='b',\n+                                                    linestyle=(0, [6, 6]))\n+    rect_test2 = Rectangle(loc, width, height, linewidth=3, edgecolor='r',\n+                                                    linestyle=(6, [6, 6]))\n+    assert rect_test.get_linestyle() == (0, [6, 6])\n+    assert rect_test2.get_linestyle() == (6, [6, 6])\n+\n+    ax_test.add_patch(rect_test)\n+    ax_test.add_patch(rect_test2)\n+\n+\n def test_negative_rect():\n     # These two rectangles have the same vertices, but starting from a\n     # different point.  (We also drop the last vertex, which is a duplicate.)\n",
        "problem_statement": "[Bug]: offset dash linestyle has no effect in patch objects\n### Bug summary\n\nWhen setting the linestyle on a patch object using a dash tuple the offset has no effect.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nimport matplotlib as mpl\r\n\r\nplt.figure(figsize=(10,10))\r\nax = plt.gca()\r\nax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'r', linewidth=4, ls=(0,(10,10))))\r\nax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'b', linewidth=4, ls=(10,(10,10))))\r\nplt.ylim([0,2])\r\nplt.xlim([0,2])\r\nplt.show()\n```\n\n\n### Actual outcome\n\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image shows a plot with a single blue rectangle centered at the coordinates (0.5, 0.5) with a width and height of 1. The rectangle has a dashed edge with a linewidth of 4 and a linestyle of (0, (10, 10)). The plot has a white background and the axes are labeled with numerical values ranging from 0 to 2 on both the x and y axes. The rectangle's dashed lines are evenly spaced and do not show any visible offset, indicating that the linestyle offset is not being applied as expected.\n- **Analysis**: \nThis image demonstrates the issue where the offset dash linestyle has no effect in patch objects. The two rectangles with different linewidths and linestyle tuples (0,(10,10) and 10,(10,10)) are expected to show a visible offset, but they overlap, indicating that the offset is not being applied. This image is necessary for documenting the issue as it visually confirms the problem with the linestyle offset in patch objects. The technical value lies in the clear depiction of the overlapping lines, which should be offset according to the specified linestyle tuples. This image strengthens the issue documentation by providing a visual representation of the expected and actual behavior, highlighting the discrepancy that needs to be addressed.\n---\r\n\r\nthe patch edge lines overlap, not adhering to the offset.\n\n### Expected outcome\n\nHaven't been able to get any patch objects to have a proper offset on the edge line style but the expected outcome is shown here with Line2D objects\r\n\r\n```\r\nimport matplotlib.pyplot as plt\r\nimport matplotlib as mpl\r\nimport numpy as np\r\n\r\nax_g = plt.gca()\r\n\r\nx = np.linspace(0, np.pi*4, 100)\r\ny = np.sin(x+np.pi/2)\r\nz = np.sin(x+np.pi/4)\r\nw = np.sin(x)\r\n\r\nplt.plot(x, y, ls=(0, (10, 10)), color='b')\r\nplt.plot(x, y, ls=(10, (10, 10)), color='r')\r\nplt.show()\r\n```\r\n\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 2\n- **Contextual Description**: \nThe image displays a plot with two overlapping sinusoidal curves. The blue curve represents the sine function of x + \u03c0/2, and the red curve represents the sine function of x + \u03c0/4. Both curves are plotted against the x-axis, which ranges from 0 to 12. The y-axis ranges from -1 to 1. The blue curve has a linestyle of (0, (10, 10)), and the red curve has a linestyle of (10, (10, 10)). The dashed lines of both curves are evenly spaced, and the offset between the dashed lines of the two curves is clearly visible, demonstrating the expected behavior of the linestyle offset.\n- **Analysis**: \nThis image shows the expected outcome with Line2D objects, where the offset dash linestyle is correctly applied. The two sine wave lines with different linestyle tuples (0, (10, 10) and 10, (10, 10)) clearly demonstrate the expected offset behavior. This image is crucial for understanding the issue because it provides a comparison to the actual outcome shown in the first image, illustrating the difference in behavior between Line2D and patch objects. The technical value is in the clear visual representation of the expected offset, which helps in troubleshooting and identifying the root cause of the issue in patch objects. This image enhances the issue documentation by offering a visual reference for the expected behavior, aiding developers in understanding and resolving the problem.\n---\r\n\r\n\n\n### Additional information\n\nI have tried the Ellipse patch object as well and found the same issue. I also reproduced in Ubuntu 18.04 VM running matplotlib 3.5.0 with agg backend.\n\n### Operating system\n\nOS/X\n\n### Matplotlib Version\n\n3.3.4\n\n### Matplotlib Backend\n\nMacOSX\n\n### Python version\n\nPython 3.8.8\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\nconda\n\n### Issue Summary (Structured)\n- **problemSummary**: When setting the linestyle on a patch object using a dash tuple, the offset has no effect.\n- **context**: The issue was encountered with Matplotlib version 3.3.4 on MacOSX backend and Python 3.8.8, installed via conda.\n- **stepsToReproduce**: ['Create a figure with a specified size.', 'Add a patch object with specified parameters (alpha, edgecolor, linewidth, linestyle).', 'Set the linestyle with a dash tuple.', 'Display the figure.']\n- **expectedResults**: The patch edge lines should have a proper offset on the edge line style.\n- **actualResults**: The patch edge lines overlap, not adhering to the offset.\n- **supplementaryImages**: ['A visual representation of the expected outcome using Line2D objects.']\n- **additionalNotes**: The issue was also observed with the Ellipse patch object and reproduced in Ubuntu 18.04 VM running matplotlib 3.5.0 with agg backend.",
        "hints_text": "Upon digging deeper into this issue it appears that this actually the intended behavior: https://github.com/matplotlib/matplotlib/blob/f8cd2c9f532f65f8b2e3dec6d54e03c48721233c/lib/matplotlib/patches.py#L588 \r\n\r\nSo it might be prudent to just update the docstring to reflect this fact.\r\n\r\nI'm curious why this was made the default behavior though\nreplacing the 0 here with the passed offset works completely fine on my OSX and Ubuntu setups.\r\nhttps://github.com/matplotlib/matplotlib/blob/f8cd2c9f532f65f8b2e3dec6d54e03c48721233c/lib/matplotlib/patches.py#L590\n@oliverpriebe Why do you want to do this?   \r\n\r\nOn one hand, we will sort out how to manage changing behavior when we need to, but on the other hand we need to have a very good reason to change long-standing behavior!\nI'd like to use edge colors (red/blue) to denote a binary property of an entity represented by a rectangular patch that may overlap exactly with another entity with the opposite property value. When they overlap I'd like to easily see the two colors -- which isn't possible by just using low alphas. \r\n\r\nAdmittedly this is both a niche use case and can be worked around by hacking the onoffseq as so \r\n\r\n```\r\nplt.figure(1); plt.clf()\r\nax = plt.gca()\r\nax.add_patch(mpl.patches.Rectangle(\r\n                  (0, 0),\r\n                  1, 1,\r\n                  facecolor = 'gray',\r\n                  edgecolor = 'r',\r\n                  linestyle = (0, [6, 0, 0, 6]),\r\n                  fill = True\r\n                ))\r\nax.add_patch(mpl.patches.Rectangle(\r\n                  (0, 0),\r\n                  1, 1,\r\n                  facecolor = 'gray',\r\n                  edgecolor = 'r',\r\n                  linestyle = (0, [0, 6, 6, 0]),\r\n                  fill = True\r\n                ))\r\nax.set_xlim([-2, 2])\r\nax.set_ylim([-2, 2])\r\n```\nbut it might save the next poor soul some time if the docstring was updated\nI couldn't find a reason why we should ignore dash offset here. If this was intended, we should issue a warning if the user sets a non-zero value. However I rather think this was an oversight and even though noticed, nobody bothered to take action.\r\n\r\nhttps://github.com/matplotlib/matplotlib/blob/d1f6b763d0b122ad4787bbc43cc8dbd1652bf4b5/lib/matplotlib/patches.py#L588\r\n\r\nThis is a niche feature that almost nobody will use. But AFAICS, there's little harm in supporting offests here. The only user code we could break with that is if users would explicitly have set an offset but rely on it not being applied. That's not something we'd have to guard against. To me this is simply a bug (affecting very little users), and we could fix it right away.\nMarking this as good first issue as there is a minor modification required. Most work will be related to tests, probably an equality test with the workaround and the fixed code, and writing a sensible user release note clarifying that this has been fixed.",
        "created_at": "2022-07-11T01:41:11Z",
        "version": "3.5",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_patches.py::test_dash_offset_patch_draw[png]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_patches.py::test_Polygon_close\", \"lib/matplotlib/tests/test_patches.py::test_corner_center\", \"lib/matplotlib/tests/test_patches.py::test_rotate_rect\", \"lib/matplotlib/tests/test_patches.py::test_rotate_rect_draw[png]\", \"lib/matplotlib/tests/test_patches.py::test_negative_rect\", \"lib/matplotlib/tests/test_patches.py::test_clip_to_bbox[png]\", \"lib/matplotlib/tests/test_patches.py::test_clip_to_bbox[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_patch_alpha_coloring[png]\", \"lib/matplotlib/tests/test_patches.py::test_patch_alpha_coloring[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_patch_alpha_override[png]\", \"lib/matplotlib/tests/test_patches.py::test_patch_alpha_override[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_patch_color_none\", \"lib/matplotlib/tests/test_patches.py::test_patch_custom_linestyle[png]\", \"lib/matplotlib/tests/test_patches.py::test_patch_custom_linestyle[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_patch_linestyle_accents\", \"lib/matplotlib/tests/test_patches.py::test_patch_linestyle_none[png]\", \"lib/matplotlib/tests/test_patches.py::test_wedge_movement\", \"lib/matplotlib/tests/test_patches.py::test_wedge_range[png]\", \"lib/matplotlib/tests/test_patches.py::test_wedge_range[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_patch_str\", \"lib/matplotlib/tests/test_patches.py::test_multi_color_hatch[png]\", \"lib/matplotlib/tests/test_patches.py::test_multi_color_hatch[pdf]\", \"lib/matplotlib/tests/test_patches.py::test_units_rectangle[png]\", \"lib/matplotlib/tests/test_patches.py::test_connection_patch[png]\", \"lib/matplotlib/tests/test_patches.py::test_connection_patch_fig[png]\", \"lib/matplotlib/tests/test_patches.py::test_datetime_rectangle\", \"lib/matplotlib/tests/test_patches.py::test_datetime_datetime_fails\", \"lib/matplotlib/tests/test_patches.py::test_contains_point\", \"lib/matplotlib/tests/test_patches.py::test_contains_points\", \"lib/matplotlib/tests/test_patches.py::test_shadow[png]\", \"lib/matplotlib/tests/test_patches.py::test_fancyarrow_units\", \"lib/matplotlib/tests/test_patches.py::test_fancyarrow_setdata\", \"lib/matplotlib/tests/test_patches.py::test_fancyarrow_shape_error\", \"lib/matplotlib/tests/test_patches.py::test_boxstyle_errors[foo-Unknown\", \"lib/matplotlib/tests/test_patches.py::test_boxstyle_errors[Round,foo-Incorrect\", \"lib/matplotlib/tests/test_patches.py::test_annulus[png]\", \"lib/matplotlib/tests/test_patches.py::test_annulus_setters[png]\", \"lib/matplotlib/tests/test_patches.py::test_annulus_setters2[png]\", \"lib/matplotlib/tests/test_patches.py::test_degenerate_polygon\", \"lib/matplotlib/tests/test_patches.py::test_color_override_warning[edgecolor]\", \"lib/matplotlib/tests/test_patches.py::test_color_override_warning[facecolor]\", \"lib/matplotlib/tests/test_patches.py::test_empty_verts\", \"lib/matplotlib/tests/test_patches.py::test_default_antialiased\", \"lib/matplotlib/tests/test_patches.py::test_default_linestyle\", \"lib/matplotlib/tests/test_patches.py::test_default_capstyle\", \"lib/matplotlib/tests/test_patches.py::test_default_joinstyle\"]",
        "environment_setup_commit": "de98877e3dc45de8dd441d008f23d88738dc015d"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-24189",
        "base_commit": "deb7b1145b71c9f60b87d4eaf32e848b1ea5ebe6",
        "patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -1838,13 +1838,15 @@ def subplot_mosaic(self, mosaic, *, sharex=False, sharey=False,\n             Defines the relative widths of the columns. Each column gets a\n             relative width of ``width_ratios[i] / sum(width_ratios)``.\n             If not given, all columns will have the same width.  Equivalent\n-            to ``gridspec_kw={'width_ratios': [...]}``.\n+            to ``gridspec_kw={'width_ratios': [...]}``. In the case of nested\n+            layouts, this argument applies only to the outer layout.\n \n         height_ratios : array-like of length *nrows*, optional\n             Defines the relative heights of the rows. Each row gets a\n             relative height of ``height_ratios[i] / sum(height_ratios)``.\n             If not given, all rows will have the same height. Equivalent\n-            to ``gridspec_kw={'height_ratios': [...]}``.\n+            to ``gridspec_kw={'height_ratios': [...]}``. In the case of nested\n+            layouts, this argument applies only to the outer layout.\n \n         subplot_kw : dict, optional\n             Dictionary with keywords passed to the `.Figure.add_subplot` call\n@@ -1852,7 +1854,10 @@ def subplot_mosaic(self, mosaic, *, sharex=False, sharey=False,\n \n         gridspec_kw : dict, optional\n             Dictionary with keywords passed to the `.GridSpec` constructor used\n-            to create the grid the subplots are placed on.\n+            to create the grid the subplots are placed on. In the case of\n+            nested layouts, this argument applies only to the outer layout.\n+            For more complex layouts, users should use `.Figure.subfigures`\n+            to create the nesting.\n \n         empty_sentinel : object, optional\n             Entry in the layout to mean \"leave this space empty\".  Defaults\n@@ -2022,7 +2027,7 @@ def _do_layout(gs, mosaic, unique_ids, nested):\n                     # recursively add the nested mosaic\n                     rows, cols = nested_mosaic.shape\n                     nested_output = _do_layout(\n-                        gs[j, k].subgridspec(rows, cols, **gridspec_kw),\n+                        gs[j, k].subgridspec(rows, cols),\n                         nested_mosaic,\n                         *_identify_keys_and_nested(nested_mosaic)\n                     )\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_figure.py b/lib/matplotlib/tests/test_figure.py\n--- a/lib/matplotlib/tests/test_figure.py\n+++ b/lib/matplotlib/tests/test_figure.py\n@@ -922,6 +922,26 @@ def test_nested_tuple(self, fig_test, fig_ref):\n         fig_ref.subplot_mosaic([[\"F\"], [x]])\n         fig_test.subplot_mosaic([[\"F\"], [xt]])\n \n+    def test_nested_width_ratios(self):\n+        x = [[\"A\", [[\"B\"],\n+                    [\"C\"]]]]\n+        width_ratios = [2, 1]\n+\n+        fig, axd = plt.subplot_mosaic(x, width_ratios=width_ratios)\n+\n+        assert axd[\"A\"].get_gridspec().get_width_ratios() == width_ratios\n+        assert axd[\"B\"].get_gridspec().get_width_ratios() != width_ratios\n+\n+    def test_nested_height_ratios(self):\n+        x = [[\"A\", [[\"B\"],\n+                    [\"C\"]]], [\"D\", \"D\"]]\n+        height_ratios = [1, 2]\n+\n+        fig, axd = plt.subplot_mosaic(x, height_ratios=height_ratios)\n+\n+        assert axd[\"D\"].get_gridspec().get_height_ratios() == height_ratios\n+        assert axd[\"B\"].get_gridspec().get_height_ratios() != height_ratios\n+\n     @check_figures_equal(extensions=[\"png\"])\n     @pytest.mark.parametrize(\n         \"x, empty_sentinel\",\n",
        "problem_statement": "[Bug]: Error using width_ratios with nested mosaic in subplot_mosaic()\n### Bug summary\r\n\r\nplt.subplot_mosaic() fails with a confusing error message when passing width_ratios (or height_ratios) with a nested list mosaic, unless all outer and inner mosaics have the same number of columns (or rows).\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\n\r\nmosaic = [[\"A\", [[\"B\"],\r\n                 [\"C\"]]]]\r\n\r\nfig, axd = plt.subplot_mosaic(mosaic, width_ratios=[2, 1])\r\n```\r\n\r\n\r\n### Actual outcome\r\n```\r\nTraceback (most recent call last):\r\n  File \"C:\\Users\\bneary3\\test_layouts.py\", line 6, in <module>\r\n    fig, axd = plt.subplot_mosaic(mosaic, width_ratios=[2, 1])\r\n  File \"C:\\Users\\bneary3\\Anaconda3\\envs\\mpl36\\lib\\site-packages\\matplotlib\\pyplot.py\", line 1533, in subplot_mosaic\r\n    ax_dict = fig.subplot_mosaic(\r\n  File \"C:\\Users\\bneary3\\Anaconda3\\envs\\mpl36\\lib\\site-packages\\matplotlib\\figure.py\", line 2042, in subplot_mosaic\r\n    ret = _do_layout(gs, mosaic, *_identify_keys_and_nested(mosaic))\r\n  File \"C:\\Users\\bneary3\\Anaconda3\\envs\\mpl36\\lib\\site-packages\\matplotlib\\figure.py\", line 2023, in _do_layout\r\n    gs[j, k].subgridspec(rows, cols, **gridspec_kw),\r\n  File \"C:\\Users\\bneary3\\Anaconda3\\envs\\mpl36\\lib\\site-packages\\matplotlib\\gridspec.py\", line 749, in subgridspec\r\n    return GridSpecFromSubplotSpec(nrows, ncols, self, **kwargs)\r\n  File \"C:\\Users\\bneary3\\Anaconda3\\envs\\mpl36\\lib\\site-packages\\matplotlib\\gridspec.py\", line 516, in __init__\r\n    super().__init__(nrows, ncols,\r\n  File \"C:\\Users\\bneary3\\Anaconda3\\envs\\mpl36\\lib\\site-packages\\matplotlib\\gridspec.py\", line 56, in __init__\r\n    self.set_width_ratios(width_ratios)\r\n  File \"C:\\Users\\bneary3\\Anaconda3\\envs\\mpl36\\lib\\site-packages\\matplotlib\\gridspec.py\", line 111, in set_width_ratios\r\n    raise ValueError('Expected the given number of width ratios to '\r\nValueError: Expected the given number of width ratios to match the number of columns of the grid\r\n```\r\n### Expected outcome\r\n\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image shows a plot generated by matplotlib with a mosaic layout. The mosaic consists of three sections labeled 'A', 'B', and 'C'. Section 'A' is a large square occupying the left side of the plot, with coordinates ranging from (0.0, 0.0) to (1.0, 1.0). Section 'B' is a smaller square located in the top right corner, with coordinates ranging from (0.0, 0.0) to (1.0, 1.0) for both axes. Section 'C' is another smaller square located directly below 'B', sharing the same x-axis range but with a y-axis range from (0.0, 0.0) to (1.0, 1.0). The overall layout suggests an attempt to create a nested mosaic with different width ratios, which is related to the bug described in the issue where specifying width_ratios for a nested mosaic fails unless all outer and inner mosaics have the same number of columns.\n- **Analysis**: \nThis image directly demonstrates the issue reported, which is an error when using `width_ratios` with a nested list mosaic in `plt.subplot_mosaic()`. The image shows the expected layout of the mosaic, with three distinct sections labeled 'A', 'B', and 'C'. The layout is intended to have a larger section 'A' on the left, with two smaller sections 'B' and 'C' stacked vertically on the right. This visual representation helps to understand the intended structure of the mosaic and how it should be laid out according to the provided code snippet. The image is necessary for documenting the issue because it provides a clear visual expectation of what the code should produce, which can be compared to the actual outcome that results in an error. The technical value of this image lies in its ability to illustrate the intended layout, which is crucial for troubleshooting the error related to the mismatch between the number of width ratios and the number of columns in the grid. Developers should focus on the layout structure and the positioning of the sections when reviewing this image, as it highlights the expected behavior that is not being achieved due to the error.\n---\r\n\r\n### Additional information\r\n\r\nFrom what I can tell, this happens because the layout is built recursively, passing the same gridspec_kw to subgridspec() at each level of nesting. I realize that the use of width_ratios / height_ratios / gridspec_kw with nested list mosaics could get complicated, but it would be nice to be able to at least specify them for the outer list, or in some other way implement this feature for nested list layouts. If not, maybe include a helpful error message that explains this limitation so the user doesn't think they have specified the wrong number of ratios.\r\n\r\n### Operating system\r\n\r\nWindows 10\r\n\r\n### Matplotlib Version\r\n\r\n3.6.0\r\n\r\n### Matplotlib Backend\r\n\r\nQtAgg\r\n\r\n### Python version\r\n\r\n3.10\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n\n### Issue Summary (Structured)\n- **problemSummary**: Error occurs when using width_ratios with a nested list mosaic in plt.subplot_mosaic() if the number of columns is not consistent across nested lists.\n- **context**: The issue arises from a recursive building of the layout, passing the same gridspec_kw to subgridspec() at each level of nesting.\n- **stepsToReproduce**: ['Define a nested list mosaic with different column counts in outer and inner lists.', 'Attempt to use plt.subplot_mosaic() with the defined mosaic and width_ratios.', \"Observe the ValueError indicating the number of width ratios does not match the grid's number of columns.\"]\n- **expectedResults**: The user expected the subplot mosaic to be created with the specified width ratios without raising an error.\n- **actualResults**: A ValueError was raised indicating the number of width ratios did not match the number of columns in the grid.\n- **supplementaryImages**: [\"Three graphs with labels 'A', 'B', and 'C' in a nested layout, illustrating the intended mosaic structure.\"]\n- **additionalNotes**: The user suggests implementing a feature to allow specifying width_ratios for the outer list or providing a helpful error message explaining the limitation.",
        "hints_text": "I advocate that passing these kwargs to nested definitions is simply a bug. We should only apply them to the outermost grid. - Typically it does not make sense to use the same parameters for inner definitions even if they are compatible.\r\n\r\nDefining parameters for inner layouts might be added later by supporting nested datastructures for *gridspec_kw*. *width_ratios* / *height_ratios* are only a convenience layer and don't need to handle complex cases such as passing parameters to inner layouts.\nMarking as good first issue.\r\n\r\nThings to do:\r\n- do not pass `width_ratios`, `height_ratios` to nested layouts\r\n- document this in the parameter descriptions\r\n- add a test: `subplot_mosaic([['A', [['B', 'C']]]], width_ratios=[2, 1])` should be good. You can check that the width ratios of the outer layout is [2, 1] but of the inner is not.",
        "created_at": "2022-10-16T15:17:40Z",
        "version": "3.6",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_width_ratios\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_height_ratios\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_figure.py::test_align_labels[png]\", \"lib/matplotlib/tests/test_figure.py::test_align_labels_stray_axes\", \"lib/matplotlib/tests/test_figure.py::test_figure_label\", \"lib/matplotlib/tests/test_figure.py::test_fignum_exists\", \"lib/matplotlib/tests/test_figure.py::test_clf_keyword\", \"lib/matplotlib/tests/test_figure.py::test_figure[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[png]\", \"lib/matplotlib/tests/test_figure.py::test_figure_legend[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_gca\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_subclass\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_invalid\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[png]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_suptitle_fontproperties\", \"lib/matplotlib/tests/test_figure.py::test_alpha[png]\", \"lib/matplotlib/tests/test_figure.py::test_too_many_figures\", \"lib/matplotlib/tests/test_figure.py::test_iterability_axes_argument\", \"lib/matplotlib/tests/test_figure.py::test_set_fig_size\", \"lib/matplotlib/tests/test_figure.py::test_axes_remove\", \"lib/matplotlib/tests/test_figure.py::test_figaspect\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[both]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[major]\", \"lib/matplotlib/tests/test_figure.py::test_autofmt_xdate[minor]\", \"lib/matplotlib/tests/test_figure.py::test_change_dpi\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[1-nan]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[-1-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_size[inf-1]\", \"lib/matplotlib/tests/test_figure.py::test_invalid_figure_add_axes\", \"lib/matplotlib/tests/test_figure.py::test_subplots_shareax_loglabels\", \"lib/matplotlib/tests/test_figure.py::test_savefig\", \"lib/matplotlib/tests/test_figure.py::test_savefig_warns\", \"lib/matplotlib/tests/test_figure.py::test_savefig_backend\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Agg]\", \"lib/matplotlib/tests/test_figure.py::test_savefig_pixel_ratio[Cairo]\", \"lib/matplotlib/tests/test_figure.py::test_figure_repr\", \"lib/matplotlib/tests/test_figure.py::test_valid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_invalid_layouts\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[png]\", \"lib/matplotlib/tests/test_figure.py::test_add_artist[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[png]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[ps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[eps]\", \"lib/matplotlib/tests/test_figure.py::test_fspath[svg]\", \"lib/matplotlib/tests/test_figure.py::test_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_axes_removal\", \"lib/matplotlib/tests/test_figure.py::test_removed_axis\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clear]\", \"lib/matplotlib/tests/test_figure.py::test_figure_clear[clf]\", \"lib/matplotlib/tests/test_figure.py::test_clf_not_redefined\", \"lib/matplotlib/tests/test_figure.py::test_picking_does_not_stale\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_twotuple\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[pdf]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[eps]\", \"lib/matplotlib/tests/test_figure.py::test_animated_with_canvas_change[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_basic[x1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_all_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_tuple[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x0-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x1-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x2-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x3-None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x4-SKIP-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_empty[x5-0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail_list_of_str\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw0-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[subplot_kw1-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_subplot_kw[None-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_string_parser\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[AAA\\\\nBBB-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[\\\\nAAA\\\\nBBB\\\\n-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_single_str_input[ABC\\\\nDEF-png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x0-(?m)we\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x1-There\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[AAA\\\\nc\\\\nBBB-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_fail[x3-All\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_hashable_keys[png]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[abc]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cab]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bca]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[cba]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[acb]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_user_order[bac]\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_nested_user_order\", \"lib/matplotlib/tests/test_figure.py::TestSubplotMosaic::test_share_all\", \"lib/matplotlib/tests/test_figure.py::test_reused_gridspec\", \"lib/matplotlib/tests/test_figure.py::test_subfigure[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_tightbbox\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_dpi\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ss[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_double[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_spanning\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_ticks\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_scatter_size[png]\", \"lib/matplotlib/tests/test_figure.py::test_subfigure_pdf\", \"lib/matplotlib/tests/test_figure.py::test_add_subplot_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_add_axes_kwargs\", \"lib/matplotlib/tests/test_figure.py::test_ginput\", \"lib/matplotlib/tests/test_figure.py::test_waitforbuttonpress\", \"lib/matplotlib/tests/test_figure.py::test_kwargs_pass\", \"lib/matplotlib/tests/test_figure.py::test_rcparams[png]\", \"lib/matplotlib/tests/test_figure.py::test_deepcopy\", \"lib/matplotlib/tests/test_figure.py::test_unpickle_with_device_pixel_ratio\"]",
        "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-24570",
        "base_commit": "8f0003ae902952372824c9917975fb372c026a42",
        "patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -166,10 +166,10 @@ def _get_aligned_offsets(hd_list, height, align=\"baseline\"):\n         descent = max(d for h, d in hd_list)\n         height = height_descent + descent\n         offsets = [0. for h, d in hd_list]\n-    elif align in [\"left\", \"top\"]:\n+    elif align in [\"left\", \"bottom\"]:\n         descent = 0.\n         offsets = [d for h, d in hd_list]\n-    elif align in [\"right\", \"bottom\"]:\n+    elif align in [\"right\", \"top\"]:\n         descent = 0.\n         offsets = [height - h + d for h, d in hd_list]\n     elif align == \"center\":\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_offsetbox.py b/lib/matplotlib/tests/test_offsetbox.py\n--- a/lib/matplotlib/tests/test_offsetbox.py\n+++ b/lib/matplotlib/tests/test_offsetbox.py\n@@ -13,7 +13,7 @@\n \n from matplotlib.offsetbox import (\n     AnchoredOffsetbox, AnnotationBbox, AnchoredText, DrawingArea, OffsetBox,\n-    OffsetImage, TextArea, _get_packed_offsets)\n+    OffsetImage, TextArea, _get_packed_offsets, HPacker, VPacker)\n \n \n @image_comparison(['offsetbox_clipping'], remove_text=True)\n@@ -335,3 +335,46 @@ def test_arrowprops_copied():\n                         arrowprops=arrowprops)\n     assert ab.arrowprops is not ab\n     assert arrowprops[\"relpos\"] == (.3, .7)\n+\n+\n+@pytest.mark.parametrize(\"align\", [\"baseline\", \"bottom\", \"top\",\n+                                   \"left\", \"right\", \"center\"])\n+def test_packers(align):\n+    # set the DPI to match points to make the math easier below\n+    fig = plt.figure(dpi=72)\n+    x1, y1 = 10, 30\n+    x2, y2 = 20, 60\n+    r1 = DrawingArea(x1, y1)\n+    r2 = DrawingArea(x2, y2)\n+\n+    hpacker = HPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    vpacker = VPacker(children=[r1, r2], pad=0, sep=0, align=align)\n+    renderer = fig.canvas.get_renderer()\n+\n+    # HPacker\n+    *extents, offset_pairs = hpacker.get_extent_offsets(renderer)\n+    # width, height, xdescent, ydescent\n+    assert_allclose((x1 + x2, max(y1, y2), 0, 0), extents)\n+    # internal element placement\n+    if align in (\"baseline\", \"left\", \"bottom\"):\n+        y_height = 0\n+    elif align in (\"right\", \"top\"):\n+        y_height = y2 - y1\n+    elif align == \"center\":\n+        y_height = (y2 - y1) / 2\n+    # x-offsets, y-offsets\n+    assert_allclose([(0, y_height), (x1, 0)], offset_pairs)\n+\n+    # VPacker\n+    *extents, offset_pairs = vpacker.get_extent_offsets(renderer)\n+    # width, height, xdescent, ydescent\n+    assert_allclose([max(x1, x2), y1 + y2, 0, max(y1, y2)], extents)\n+    # internal element placement\n+    if align in (\"baseline\", \"left\", \"bottom\"):\n+        x_height = 0\n+    elif align in (\"right\", \"top\"):\n+        x_height = x2 - x1\n+    elif align == \"center\":\n+        x_height = (x2 - x1) / 2\n+    # x-offsets, y-offsets\n+    assert_allclose([(x_height, 0), (0, -y2)], offset_pairs)\n",
        "problem_statement": "[Bug]: `align` in `HPacker` is reversed\n### Bug summary\n\nFor the `align` parameter in `HPacker`, the options `top` and `bottom` seems reversed\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.offsetbox import DrawingArea, HPacker, VPacker, AnchoredOffsetbox, TextArea\r\nfrom matplotlib.patches import Rectangle\r\n\r\nda1 = DrawingArea(10, 20)\r\nrect1 = Rectangle((0, 0), 10, 20)\r\nda1.add_artist(rect1)\r\n\r\nda2 = DrawingArea(10, 30)\r\nrect2 = Rectangle((0, 0), 10, 30)\r\nda2.add_artist(rect2)\r\n\r\nalign = \"bottom\"\r\n\r\npack = HPacker(children=[da1, da2], pad=10, sep=10, align=align)\r\ntitle = TextArea(f\"align='{align}'\")\r\npack = VPacker(children=[title, pack], sep=10, pad=10, align=\"center\")\r\n\r\nbox = AnchoredOffsetbox(child=pack, loc=\"center\")\r\n\r\n_, ax = plt.subplots()\r\nax.add_artist(box)\n```\n\n\n### Actual outcome\n\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image is a plot generated by Matplotlib, showcasing the alignment of two rectangles within a drawing area. The plot has a simple Cartesian coordinate system with axes ranging from 0 to 1.0. Inside the plot, there is a black rectangular box containing two blue rectangles. The text 'align=bottom' is written inside the black box, indicating the alignment setting used. The two blue rectangles are aligned at the bottom of the black box, with the taller rectangle on the right side and the shorter one on the left. The plot background is white, and the axes are labeled with numerical values at regular intervals.\n- **Analysis**: \nThis image demonstrates the issue where the `align` parameter in `HPacker` appears to be reversed. The `align='bottom'` text is positioned at the top of the bars, which is contrary to the expected behavior. The image captures the misalignment, showing that the bars are aligned at the top instead of the bottom as specified. This image is necessary for documenting the issue because it visually confirms the unexpected behavior of the `align` parameter. The technical value lies in the clear depiction of the misalignment, which helps in understanding the problem and its impact on the layout of the bars. The image strengthens the issue documentation by providing a visual representation that text alone could not convey, highlighting the critical detail of the reversed alignment. Developers should focus on the positioning of the `align='bottom'` text and the bars to understand the issue and work towards a resolution.\n---\r\n\n\n### Expected outcome\n\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 2\n- **Contextual Description**: \nThis image is a plot similar to the first one, with the same alignment setting 'align=bottom'. The plot's coordinate system and axes are identical, ranging from 0 to 1.0. Inside the plot, there is a black rectangular box containing two blue rectangles. The text 'align=bottom' is written inside the black box, similar to the first image. The two blue rectangles are aligned at the bottom of the black box, with the taller rectangle on the right side and the shorter one on the left. The plot background is white, and the axes are labeled with numerical values at regular intervals, matching the first image.\n- **Analysis**: \nThis image further illustrates the issue with the `align` parameter in `HPacker`. Similar to the first image, the `align='bottom'` text is positioned at the top of the bars, confirming the reversed alignment. The image captures the same unexpected behavior, providing additional evidence of the problem. The technical value is in the consistent depiction of the misalignment, reinforcing the issue's presence and its impact on the layout. The image is important for documentation as it offers another visual confirmation of the reversed alignment, strengthening the issue report. Developers should pay attention to the positioning of the `align='bottom'` text and the bars, as this detail is crucial for understanding and resolving the issue.\n---\r\n\n\n### Additional information\n\n_No response_\n\n### Operating system\n\n_No response_\n\n### Matplotlib Version\n\n3.6.2\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n_No response_\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\n_No response_\n\n### Issue Summary (Structured)\n- **problemSummary**: The `align` parameter in `HPacker` appears to be reversed. `align='bottom'` should align the children at the bottom, but it aligns them at the top, and vice versa.\n- **context**: The issue was discovered while using the `HPacker` class from the `matplotlib.offsetbox` module. The `align` parameter is used to determine how the children of the `HPacker` are aligned vertically.\n- **stepsToReproduce**: ['Import necessary modules from matplotlib', 'Create two `DrawingArea` objects with rectangles', \"Create an `HPacker` object with the `align` parameter set to 'bottom'\", 'Pack the `DrawingArea` objects into the `HPacker`', 'Create a `TextArea` with the `align` parameter', 'Pack the `HPacker` and `TextArea` into a `VPacker`', 'Create an `AnchoredOffsetbox` with the `VPacker`', 'Add the `AnchoredOffsetbox` to a matplotlib axis']\n- **expectedResults**: The two rectangles should be aligned at the bottom when `align='bottom'` is specified.\n- **actualResults**: The two rectangles are aligned at the top when `align='bottom'` is specified.\n- **supplementaryImages**: [\"Two rectangles aligned at the top despite `align='bottom'` parameter\"]\n- **additionalNotes**: The issue occurs with Matplotlib version 3.6.2 and has not been tested with other versions.",
        "hints_text": "This indeed seems incorrect, however, I'm not sure what the path to fixing it is even that it's likely been that way for quite a while and swapping back will break anyone who had corrected for the mistake.  \r\n\r\nI can't see that we use this internally, and it's obviously untested.  \n> This indeed seems incorrect, however, I'm not sure what the path to fixing it is even that it's likely been that way for quite a while and swapping back will break anyone who had corrected for the mistake.\r\n\r\nThere's no easy migration path. Probably the simplest thing is\r\n\r\n1. Introduce a flag `fixed_api`. Default `False`. When true use the correct alignment interpretation. Warn if not set.\r\n2. Wait some releases (*migration phase*)\r\n3. Change the default to True and error out on False.\r\n4. Wait some releases (*stabilization phase*) - This is necessary to buffer the migration and the cleanup phase. There's a certain overlap in versions in the installed base. A code that uses HPacker may need to support more than one matplotlib version.\r\n5. Deprecate the flag.\r\n6. Wait some releases (*cleanup phase*)\r\n7. Remove the flag.\r\n\r\nThis is a bit annoying on the user-side because they need two steps (1) invert their logic and add the flag (2) remove the flag. But one cannot do it any simpler if one does not want to make a hard break, which is not an option.\nI guess the fact we never use this internally, and no one has complained so far, indicates to me that this isn't used much externally?  If so, perhaps we just fix it?  \nWhy doesn't this count as a behavior change API change? We do it rarely but we have kinda  documented process for it? \nFor reference, the `VPacker`'s `align='left'` or `align='right'` does work in the expected manner.\nIntroducing a flag like fixed_api and later removing it is quite a bit of work both for us and on the end user's side; one option that would be a bit less annoying (requiring handing this over fewer versions on our side and requiring fewer changes from the end users) would be to\r\n\r\n1. e.g. in 3.7 introduce instead e.g. \"TOP\"/\"BOTTOM\" with the fixed meanings, and deprecate \"top\"/\"bottom\"; then later\r\n2. in 3.9 remove the deprecation on \"top\"/\"bottom\" and at the same time change them to have the new fixed meanings. \r\n3. A possible step 3. is then to deprecate again \"TOP\"/\"BOTTOM\" and enforce again lowercase align, but that's not even really needed (we can just undocument them).\nThat works and is a shorter route at the cost of having subtle and IMHO ugly replacement values.\r\n\r\nA somewhat drastic approach is write new layout classes and deprecate the packers. In the basic form that could be the same content but with fixed behavior and a new class name. Or we could use the occasion to create more capable alignment, c.f. https://github.com/matplotlib/matplotlib/pull/23140#issuecomment-1148048791.\nDuring the call it was also suggested by @greglucas (IIRC) that this should just be considered a plain bugfix, which is also an option I'm warming up to... (perhaps that's also @jklymak's opinion stated just above.)\nMy argument is that if we make a mistake and accidentally redefine something like: `left, right = right, left`, and downstream users say \"oh that looks like a simple bug, they just reversed the order and I can reverse it back again myself\", then they are knowingly relying on flaky behavior, rather than notifying the source about the issue.\r\n\r\nWe have a user here who identified this bug and would find use in us fixing it properly, so why dance around fixing it with a long deprecation that this user will now have to work around themselves before the proper fix is in by default?\r\n\r\nI don't think this is a clear-cut case either way for how to proceed, but I did want to bring up this option of calling this a bug rather than a \"feature\" that someone else has relied upon.\r\n\r\nThis code goes way back to svn in 2008 https://github.com/matplotlib/matplotlib/commit/3ae92215dae8f55903f6bc6c8c063e5cb7498bac, and perhaps doesn't get used in the bottom/top mode much because our offsetbox and legend test cases don't fail when moving the bottom/top definitions around. Just to be clear, I _think_ this is the patch we are all talking about:\r\n\r\n```diff\r\ndiff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\r\nindex 89bd3550f3..fcad63362b 100644\r\n--- a/lib/matplotlib/offsetbox.py\r\n+++ b/lib/matplotlib/offsetbox.py\r\n@@ -170,10 +170,10 @@ def _get_aligned_offsets(hd_list, height, align=\"baseline\"):\r\n         descent = max(d for h, d in hd_list)\r\n         height = height_descent + descent\r\n         offsets = [0. for h, d in hd_list]\r\n-    elif align in [\"left\", \"top\"]:\r\n+    elif align in [\"left\", \"bottom\"]:\r\n         descent = 0.\r\n         offsets = [d for h, d in hd_list]\r\n-    elif align in [\"right\", \"bottom\"]:\r\n+    elif align in [\"right\", \"top\"]:\r\n         descent = 0.\r\n         offsets = [height - h + d for h, d in hd_list]\r\n     elif align == \"center\":\r\n```",
        "created_at": "2022-11-30T15:50:17Z",
        "version": "3.6",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_offsetbox.py::test_packers[bottom]\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[top]\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_offsetbox.py::test_offsetbox_clipping[png]\", \"lib/matplotlib/tests/test_offsetbox.py::test_offsetbox_clipping[pdf]\", \"lib/matplotlib/tests/test_offsetbox.py::test_offsetbox_clip_children\", \"lib/matplotlib/tests/test_offsetbox.py::test_offsetbox_loc_codes\", \"lib/matplotlib/tests/test_offsetbox.py::test_expand_with_tight_layout\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-250-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand-0-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[expand--1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-250-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed-0-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[fixed--1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-250-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal-0-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-250-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-250-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-250-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-250-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-100-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-100-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-100-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-100-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-0-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-0-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-0-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-0-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1--1-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1--1-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1--1-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1--1-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-None-widths0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-None-widths1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-None-widths2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets[equal--1-None-widths3]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_fixed[widths0-None-1-expected0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_fixed[widths1-10-1-expected1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_fixed[widths2-5-1-expected2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_expand[widths0-None-None-expected0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_expand[widths1-10-1-expected1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_expand[widths2-5-1-expected2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_equal[widths0-6-None-expected0]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_equal[widths1-2-None-expected1]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_equal[widths2-None-1-expected2]\", \"lib/matplotlib/tests/test_offsetbox.py::test_get_packed_offsets_equal_total_none_sep_none\", \"lib/matplotlib/tests/test_offsetbox.py::test_picking[axes\", \"lib/matplotlib/tests/test_offsetbox.py::test_picking[data-draw]\", \"lib/matplotlib/tests/test_offsetbox.py::test_picking[data-image]\", \"lib/matplotlib/tests/test_offsetbox.py::test_picking[data-text]\", \"lib/matplotlib/tests/test_offsetbox.py::test_anchoredtext_horizontal_alignment[png]\", \"lib/matplotlib/tests/test_offsetbox.py::test_annotationbbox_extents\", \"lib/matplotlib/tests/test_offsetbox.py::test_zorder\", \"lib/matplotlib/tests/test_offsetbox.py::test_arrowprops_copied\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[baseline]\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[left]\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[right]\", \"lib/matplotlib/tests/test_offsetbox.py::test_packers[center]\"]",
        "environment_setup_commit": "73909bcb408886a22e2b84581d6b9e6d9907c813"
    },
    {
        "repo": "matplotlib/matplotlib",
        "instance_id": "matplotlib__matplotlib-25346",
        "base_commit": "fbe7a446a60e603e44a7a6fbdd77f2be39d6796c",
        "patch": "diff --git a/lib/matplotlib/text.py b/lib/matplotlib/text.py\n--- a/lib/matplotlib/text.py\n+++ b/lib/matplotlib/text.py\n@@ -367,7 +367,7 @@ def _get_layout(self, renderer):\n         of a rotated text when necessary.\n         \"\"\"\n         thisx, thisy = 0.0, 0.0\n-        lines = self.get_text().split(\"\\n\")  # Ensures lines is not empty.\n+        lines = self._get_wrapped_text().split(\"\\n\")  # Ensures lines is not empty.\n \n         ws = []\n         hs = []\n",
        "test_patch": "diff --git a/lib/matplotlib/tests/test_text.py b/lib/matplotlib/tests/test_text.py\n--- a/lib/matplotlib/tests/test_text.py\n+++ b/lib/matplotlib/tests/test_text.py\n@@ -701,6 +701,22 @@ def test_wrap():\n                                         'times.')\n \n \n+def test_get_window_extent_wrapped():\n+    # Test that a long title that wraps to two lines has the same vertical\n+    # extent as an explicit two line title.\n+\n+    fig1 = plt.figure(figsize=(3, 3))\n+    fig1.suptitle(\"suptitle that is clearly too long in this case\", wrap=True)\n+    window_extent_test = fig1._suptitle.get_window_extent()\n+\n+    fig2 = plt.figure(figsize=(3, 3))\n+    fig2.suptitle(\"suptitle that is clearly\\ntoo long in this case\")\n+    window_extent_ref = fig2._suptitle.get_window_extent()\n+\n+    assert window_extent_test.y0 == window_extent_ref.y0\n+    assert window_extent_test.y1 == window_extent_ref.y1\n+\n+\n def test_long_word_wrap():\n     fig = plt.figure(figsize=(6, 4))\n     text = fig.text(9.5, 8, 'Alonglineoftexttowrap', wrap=True)\n",
        "problem_statement": "[Bug]: constrained layout with wrapped titles\n### Bug summary\n\nWhen titles are long and wrapped, constrained layout doesn't leave enough room for them.\n\n### Code for reproduction\n\n```python\nimport matplotlib.pyplot as plt\r\n\r\nfig, ax_arr = plt.subplots(2, 2, figsize=(3, 3), layout=\"constrained\")\r\nfig.suptitle(\"suptitle that is clearly too long in this case\", wrap=True)\r\nax_arr[1, 0].set_title(\"axes title that is too long for the size\", wrap=True)\r\nplt.savefig(\"test.png\")\n```\n\n\n### Actual outcome\n\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image shows a 2x2 grid of subplots created using matplotlib. Each subplot is a simple line plot with a range from 0 to 1 on both the x and y axes. The top row of subplots has a shared suptitle that reads 'suptitle that is clearly too long in this case', which is wrapped to fit within the figure. The bottom left subplot has a title that reads 'axes title that is too long for the size', which is also wrapped. The figure is saved with a constrained layout, but the wrapping of the titles causes them to overlap with the subplots, indicating that the layout does not adjust properly to accommodate the wrapped text.\n- **Analysis**: \nThis image directly demonstrates the issue described in the bug report. It shows a figure with four subplots, each with a title and a suptitle that is too long for the given space. The text for the suptitle and one of the subplot titles is cut off, indicating that the constrained layout does not leave enough room for the wrapped titles. This image is necessary for documenting the issue because it visually confirms the problem with long, wrapped titles in a constrained layout. The technical value of this image lies in its clear depiction of the layout issue, which can help developers understand the specific conditions under which the bug occurs. The image strengthens the overall issue documentation by providing a concrete example of the problem, which text alone could not convey as effectively. Developers should focus on the layout of the titles and how they are cut off, as this is the critical detail that needs to be addressed in the resolution of the issue.\n---\r\n\n\n### Expected outcome\n\nEnough space for the titles.\n\n### Additional information\n\nThere's no problem if the titles have an explicit new line (\"\\n\"), so this seems to be specific to the wrapping.\n\n### Operating system\n\nRHEL7\n\n### Matplotlib Version\n\n3.7.0 and main\n\n### Matplotlib Backend\n\nQtAgg\n\n### Python version\n\n3.11.0\n\n### Jupyter version\n\nN/A\n\n### Installation\n\nconda\n\n### Issue Summary (Structured)\n- **problemSummary**: Constrained layout does not leave enough room for long, wrapped titles.\n- **context**: This issue occurs when using matplotlib to plot with long titles that are wrapped, specifically in constrained layout mode.\n- **stepsToReproduce**: ['Create a figure with subplots using matplotlib.', 'Apply constrained layout to the figure.', \"Use long titles for the figure and subplots with the 'wrap' parameter.\", 'Save the figure as an image.']\n- **expectedResults**: Enough space should be allocated for the titles to fit properly.\n- **actualResults**: The titles are cut off or overlap with other elements.\n- **supplementaryImages**: ['An image of the figure with the issue.']\n- **additionalNotes**: The issue does not occur if the titles have an explicit new line character. The problem is reported for Matplotlib version 3.7.0 and main, with Python version 3.11.0. The installation method is conda, and the backend is QtAgg.",
        "hints_text": "I think this is fundamentally a bug in get_tightbbox?  ",
        "created_at": "2023-02-28T14:31:39Z",
        "version": "3.7",
        "FAIL_TO_PASS": "[\"lib/matplotlib/tests/test_text.py::test_get_window_extent_wrapped\"]",
        "PASS_TO_PASS": "[\"lib/matplotlib/tests/test_text.py::test_font_styles[png]\", \"lib/matplotlib/tests/test_text.py::test_font_styles[pdf]\", \"lib/matplotlib/tests/test_text.py::test_multiline[png]\", \"lib/matplotlib/tests/test_text.py::test_multiline[pdf]\", \"lib/matplotlib/tests/test_text.py::test_multiline2[png]\", \"lib/matplotlib/tests/test_text.py::test_multiline2[pdf]\", \"lib/matplotlib/tests/test_text.py::test_antialiasing[png]\", \"lib/matplotlib/tests/test_text.py::test_afm_kerning\", \"lib/matplotlib/tests/test_text.py::test_contains[png]\", \"lib/matplotlib/tests/test_text.py::test_annotation_contains\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[RuntimeError-print-Unknown\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[RuntimeError-xycoords1-Unknown\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[ValueError-foo-'foo'\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[ValueError-foo\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[ValueError-offset\", \"lib/matplotlib/tests/test_text.py::test_annotate_errors[ValueError-axes\", \"lib/matplotlib/tests/test_text.py::test_titles[png]\", \"lib/matplotlib/tests/test_text.py::test_titles[pdf]\", \"lib/matplotlib/tests/test_text.py::test_alignment[png]\", \"lib/matplotlib/tests/test_text.py::test_alignment[pdf]\", \"lib/matplotlib/tests/test_text.py::test_axes_titles[png]\", \"lib/matplotlib/tests/test_text.py::test_set_position\", \"lib/matplotlib/tests/test_text.py::test_char_index_at\", \"lib/matplotlib/tests/test_text.py::test_non_default_dpi[empty]\", \"lib/matplotlib/tests/test_text.py::test_non_default_dpi[non-empty]\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_string\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_float\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_int\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_raises\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_none\", \"lib/matplotlib/tests/test_text.py::test_get_rotation_mod360\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center-center]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center-right]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center-left]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[top-center]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[top-right]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[top-left]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[bottom-center]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[bottom-right]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[bottom-left]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[baseline-center]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[baseline-right]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[baseline-left]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center_baseline-center]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center_baseline-right]\", \"lib/matplotlib/tests/test_text.py::test_null_rotation_with_rotation_mode[center_baseline-left]\", \"lib/matplotlib/tests/test_text.py::test_bbox_clipping[png]\", \"lib/matplotlib/tests/test_text.py::test_bbox_clipping[pdf]\", \"lib/matplotlib/tests/test_text.py::test_annotation_negative_ax_coords[png]\", \"lib/matplotlib/tests/test_text.py::test_annotation_negative_fig_coords[png]\", \"lib/matplotlib/tests/test_text.py::test_text_stale\", \"lib/matplotlib/tests/test_text.py::test_agg_text_clip[png]\", \"lib/matplotlib/tests/test_text.py::test_text_size_binding\", \"lib/matplotlib/tests/test_text.py::test_font_scaling[pdf]\", \"lib/matplotlib/tests/test_text.py::test_two_2line_texts[0.4-2]\", \"lib/matplotlib/tests/test_text.py::test_two_2line_texts[2-0.4]\", \"lib/matplotlib/tests/test_text.py::test_two_2line_texts[2-2]\", \"lib/matplotlib/tests/test_text.py::test_validate_linespacing\", \"lib/matplotlib/tests/test_text.py::test_nonfinite_pos\", \"lib/matplotlib/tests/test_text.py::test_hinting_factor_backends\", \"lib/matplotlib/tests/test_text.py::test_single_artist_usenotex[png]\", \"lib/matplotlib/tests/test_text.py::test_single_artist_usenotex[pdf]\", \"lib/matplotlib/tests/test_text.py::test_single_artist_usenotex[svg]\", \"lib/matplotlib/tests/test_text.py::test_text_repr\", \"lib/matplotlib/tests/test_text.py::test_annotation_update\", \"lib/matplotlib/tests/test_text.py::test_annotation_units[png]\", \"lib/matplotlib/tests/test_text.py::test_large_subscript_title[png]\", \"lib/matplotlib/tests/test_text.py::test_wrap\", \"lib/matplotlib/tests/test_text.py::test_long_word_wrap\", \"lib/matplotlib/tests/test_text.py::test_wrap_no_wrap\", \"lib/matplotlib/tests/test_text.py::test_buffer_size[png]\", \"lib/matplotlib/tests/test_text.py::test_fontproperties_kwarg_precedence\", \"lib/matplotlib/tests/test_text.py::test_transform_rotates_text\", \"lib/matplotlib/tests/test_text.py::test_update_mutate_input\", \"lib/matplotlib/tests/test_text.py::test_invalid_rotation_values[invalid\", \"lib/matplotlib/tests/test_text.py::test_invalid_rotation_values[rotation1]\", \"lib/matplotlib/tests/test_text.py::test_invalid_color\", \"lib/matplotlib/tests/test_text.py::test_pdf_kerning[pdf]\", \"lib/matplotlib/tests/test_text.py::test_unsupported_script\", \"lib/matplotlib/tests/test_text.py::test_parse_math\", \"lib/matplotlib/tests/test_text.py::test_parse_math_rcparams\", \"lib/matplotlib/tests/test_text.py::test_pdf_font42_kerning[pdf]\", \"lib/matplotlib/tests/test_text.py::test_pdf_chars_beyond_bmp[pdf]\"]",
        "environment_setup_commit": "0849036fd992a2dd133a0cffc3f84f58ccf1840f"
    },
    {
        "repo": "mwaskom/seaborn",
        "instance_id": "mwaskom__seaborn-3276",
        "base_commit": "3733590d86a7f2c2a95cd9940a34aa7df5f5a3d2",
        "patch": "diff --git a/seaborn/matrix.py b/seaborn/matrix.py\n--- a/seaborn/matrix.py\n+++ b/seaborn/matrix.py\n@@ -298,7 +298,7 @@ def plot(self, ax, cax, kws):\n \n         # setting vmin/vmax in addition to norm is deprecated\n         # so avoid setting if norm is set\n-        if \"norm\" not in kws:\n+        if kws.get(\"norm\") is None:\n             kws.setdefault(\"vmin\", self.vmin)\n             kws.setdefault(\"vmax\", self.vmax)\n \n",
        "test_patch": "diff --git a/tests/test_matrix.py b/tests/test_matrix.py\n--- a/tests/test_matrix.py\n+++ b/tests/test_matrix.py\n@@ -265,6 +265,20 @@ def test_cmap_with_properties(self):\n         hm = mat._HeatMapper(self.df_unif, **kws)\n         npt.assert_array_equal(cmap(np.inf), hm.cmap(np.inf))\n \n+    def test_explicit_none_norm(self):\n+\n+        vals = np.linspace(.2, 1, 9)\n+        cmap = mpl.cm.binary\n+        _, (ax1, ax2) = plt.subplots(2)\n+\n+        mat.heatmap([vals], vmin=0, cmap=cmap, ax=ax1)\n+        fc_default_norm = ax1.collections[0].get_facecolors()\n+\n+        mat.heatmap([vals], vmin=0, norm=None, cmap=cmap, ax=ax2)\n+        fc_explicit_norm = ax2.collections[0].get_facecolors()\n+\n+        npt.assert_array_almost_equal(fc_default_norm, fc_explicit_norm, 2)\n+\n     def test_ticklabels_off(self):\n         kws = self.default_kws.copy()\n         kws['xticklabels'] = False\n",
        "problem_statement": "`heatmap(..., norm=None, ...)` has different behaviour than without specifying the `norm` argument\nHi,\r\n\r\nI'm noticing a strange behaviour when passing `norm=None` to a heatmap and I believe it's due to these lines: https://github.com/mwaskom/seaborn/blob/3733590d86a7f2c2a95cd9940a34aa7df5f5a3d2/seaborn/matrix.py#L299-L303\r\n\r\nSpecifically, if I use `sns.heatmap(..., vmin=0.0, vmax=1.0, ...)` I get something like this:\r\n\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThis image shows a heatmap with a color scale ranging from 0.0 to 1.0. The heatmap is divided into a grid of cells, each representing a value. The values are displayed in the cells, with a range from 0.00 to 0.10. The cells are colored according to the value, with lighter shades representing lower values and darker shades representing higher values. The heatmap is labeled with 'expected' at the top and 'predicted' at the bottom. The columns and rows are labeled with letters from A to Z and numbers from 0 to 10, respectively.\n- **Analysis**: \nThis image demonstrates the expected behavior of a heatmap when the `norm` argument is not specified. It shows a heatmap with values ranging from 0.0 to 1.0, as indicated by the color gradient. The heatmap is correctly normalized, with the color scale reflecting the specified `vmin` and `vmax` values. This image is necessary for documenting the issue because it provides a clear visual representation of the expected heatmap output, which can be compared to the actual output to identify discrepancies.\n---\r\n\r\nbut when I use `sns.heatmap(..., vmin=0.0, vmax=1.0, norm=None, ...)`, `vmin` and `vmax` are lost:\r\n\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 2\n- **Contextual Description**: \nThis image shows a heatmap with a color scale ranging from 0.0 to 1.0. The heatmap is divided into a grid of cells, each representing a value. The values are displayed in the cells, with a range from 0.00 to 0.10. The cells are colored according to the value, with lighter shades representing lower values and darker shades representing higher values. The heatmap is labeled with 'expected' at the top and 'predicted' at the bottom. The columns and rows are labeled with letters from A to Z and numbers from 0 to 10, respectively.\n- **Analysis**: \nThis image illustrates the observed behavior of a heatmap when the `norm` argument is set to `None`. It shows a heatmap with values ranging from 0.0 to 1.0, but the color scale does not reflect the specified `vmin` and `vmax` values. Instead, the color scale appears to be normalized to the actual data range, which is different from the expected behavior. This image is crucial for documenting the issue because it highlights the discrepancy between the expected and observed heatmap outputs, providing evidence of the bug.\n---\r\n\r\nI'm happy to send a PR if this issue isn't addressed anywhere.\r\n\r\n\u0218tefan\n\n### Issue Summary (Structured)\n- **problemSummary**: The heatmap function in Seaborn library is behaving differently when the norm parameter is set to None.\n- **context**: The issue arises when using the heatmap function with the vmin and vmax parameters set to specific values, and the norm parameter is set to None. The vmin and vmax values are not respected, leading to incorrect color scaling in the heatmap.\n- **stepsToReproduce**: ['Use sns.heatmap(..., vmin=0.0, vmax=1.0, ...)', 'Use sns.heatmap(..., vmin=0.0, vmax=1.0, norm=None, ...)']\n- **expectedResults**: The vmin and vmax values should be respected, even when norm=None is specified.\n- **actualResults**: The vmin and vmax values are not respected, resulting in incorrect color scaling in the heatmap.\n- **supplementaryImages**: ['First image shows the heatmap with vmin and vmax values respected.', 'Second image shows the heatmap with vmin and vmax values not respected when norm=None is specified.']\n- **additionalNotes**: The issue is believed to be caused by the code at https://github.com/mwaskom/seaborn/blob/3733590d86a7f2c2a95cd9940a34aa7df5f5a3d2/seaborn/matrix.py#L299-L303.",
        "hints_text": "",
        "created_at": "2023-02-23T14:34:53Z",
        "version": "0.13",
        "FAIL_TO_PASS": "[\"tests/test_matrix.py::TestHeatmap::test_explicit_none_norm\"]",
        "PASS_TO_PASS": "[\"tests/test_matrix.py::TestHeatmap::test_ndarray_input\", \"tests/test_matrix.py::TestHeatmap::test_df_input\", \"tests/test_matrix.py::TestHeatmap::test_df_multindex_input\", \"tests/test_matrix.py::TestHeatmap::test_mask_input[float]\", \"tests/test_matrix.py::TestHeatmap::test_mask_input[int64]\", \"tests/test_matrix.py::TestHeatmap::test_mask_input[object]\", \"tests/test_matrix.py::TestHeatmap::test_mask_limits\", \"tests/test_matrix.py::TestHeatmap::test_default_vlims\", \"tests/test_matrix.py::TestHeatmap::test_robust_vlims\", \"tests/test_matrix.py::TestHeatmap::test_custom_sequential_vlims\", \"tests/test_matrix.py::TestHeatmap::test_custom_diverging_vlims\", \"tests/test_matrix.py::TestHeatmap::test_array_with_nans\", \"tests/test_matrix.py::TestHeatmap::test_mask\", \"tests/test_matrix.py::TestHeatmap::test_custom_cmap\", \"tests/test_matrix.py::TestHeatmap::test_centered_vlims\", \"tests/test_matrix.py::TestHeatmap::test_default_colors\", \"tests/test_matrix.py::TestHeatmap::test_custom_vlim_colors\", \"tests/test_matrix.py::TestHeatmap::test_custom_center_colors\", \"tests/test_matrix.py::TestHeatmap::test_cmap_with_properties\", \"tests/test_matrix.py::TestHeatmap::test_ticklabels_off\", \"tests/test_matrix.py::TestHeatmap::test_custom_ticklabels\", \"tests/test_matrix.py::TestHeatmap::test_custom_ticklabel_interval\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_annotation\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_overwrite_kws\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_with_mask\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_mesh_colors\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_other_data\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_different_shapes\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_annotation_with_limited_ticklabels\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_cbar\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_axes\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_ticklabel_rotation\", \"tests/test_matrix.py::TestHeatmap::test_heatmap_inner_lines\", \"tests/test_matrix.py::TestHeatmap::test_square_aspect\", \"tests/test_matrix.py::TestHeatmap::test_mask_validation\", \"tests/test_matrix.py::TestHeatmap::test_missing_data_mask\", \"tests/test_matrix.py::TestHeatmap::test_cbar_ticks\", \"tests/test_matrix.py::TestDendrogram::test_ndarray_input\", \"tests/test_matrix.py::TestDendrogram::test_df_input\", \"tests/test_matrix.py::TestDendrogram::test_df_multindex_input\", \"tests/test_matrix.py::TestDendrogram::test_axis0_input\", \"tests/test_matrix.py::TestDendrogram::test_rotate_input\", \"tests/test_matrix.py::TestDendrogram::test_rotate_axis0_input\", \"tests/test_matrix.py::TestDendrogram::test_custom_linkage\", \"tests/test_matrix.py::TestDendrogram::test_label_false\", \"tests/test_matrix.py::TestDendrogram::test_linkage_scipy\", \"tests/test_matrix.py::TestDendrogram::test_dendrogram_plot\", \"tests/test_matrix.py::TestDendrogram::test_dendrogram_rotate\", \"tests/test_matrix.py::TestDendrogram::test_dendrogram_ticklabel_rotation\", \"tests/test_matrix.py::TestClustermap::test_ndarray_input\", \"tests/test_matrix.py::TestClustermap::test_df_input\", \"tests/test_matrix.py::TestClustermap::test_corr_df_input\", \"tests/test_matrix.py::TestClustermap::test_pivot_input\", \"tests/test_matrix.py::TestClustermap::test_colors_input\", \"tests/test_matrix.py::TestClustermap::test_categorical_colors_input\", \"tests/test_matrix.py::TestClustermap::test_nested_colors_input\", \"tests/test_matrix.py::TestClustermap::test_colors_input_custom_cmap\", \"tests/test_matrix.py::TestClustermap::test_z_score\", \"tests/test_matrix.py::TestClustermap::test_z_score_axis0\", \"tests/test_matrix.py::TestClustermap::test_standard_scale\", \"tests/test_matrix.py::TestClustermap::test_standard_scale_axis0\", \"tests/test_matrix.py::TestClustermap::test_z_score_standard_scale\", \"tests/test_matrix.py::TestClustermap::test_color_list_to_matrix_and_cmap\", \"tests/test_matrix.py::TestClustermap::test_nested_color_list_to_matrix_and_cmap\", \"tests/test_matrix.py::TestClustermap::test_color_list_to_matrix_and_cmap_axis1\", \"tests/test_matrix.py::TestClustermap::test_color_list_to_matrix_and_cmap_different_sizes\", \"tests/test_matrix.py::TestClustermap::test_savefig\", \"tests/test_matrix.py::TestClustermap::test_plot_dendrograms\", \"tests/test_matrix.py::TestClustermap::test_cluster_false\", \"tests/test_matrix.py::TestClustermap::test_row_col_colors\", \"tests/test_matrix.py::TestClustermap::test_cluster_false_row_col_colors\", \"tests/test_matrix.py::TestClustermap::test_row_col_colors_df\", \"tests/test_matrix.py::TestClustermap::test_row_col_colors_df_shuffled\", \"tests/test_matrix.py::TestClustermap::test_row_col_colors_df_missing\", \"tests/test_matrix.py::TestClustermap::test_row_col_colors_df_one_axis\", \"tests/test_matrix.py::TestClustermap::test_row_col_colors_series\", \"tests/test_matrix.py::TestClustermap::test_row_col_colors_series_shuffled\", \"tests/test_matrix.py::TestClustermap::test_row_col_colors_series_missing\", \"tests/test_matrix.py::TestClustermap::test_row_col_colors_ignore_heatmap_kwargs\", \"tests/test_matrix.py::TestClustermap::test_row_col_colors_raise_on_mixed_index_types\", \"tests/test_matrix.py::TestClustermap::test_mask_reorganization\", \"tests/test_matrix.py::TestClustermap::test_ticklabel_reorganization\", \"tests/test_matrix.py::TestClustermap::test_noticklabels\", \"tests/test_matrix.py::TestClustermap::test_size_ratios\", \"tests/test_matrix.py::TestClustermap::test_cbar_pos\", \"tests/test_matrix.py::TestClustermap::test_square_warning\", \"tests/test_matrix.py::TestClustermap::test_clustermap_annotation\", \"tests/test_matrix.py::TestClustermap::test_tree_kws\"]",
        "environment_setup_commit": "23860365816440b050e9211e1c395a966de3c403"
    },
    {
        "repo": "pydata/xarray",
        "instance_id": "pydata__xarray-4182",
        "base_commit": "65ca92a5c0a4143d00dd7a822bcb1d49738717f1",
        "patch": "diff --git a/xarray/core/formatting_html.py b/xarray/core/formatting_html.py\n--- a/xarray/core/formatting_html.py\n+++ b/xarray/core/formatting_html.py\n@@ -184,7 +184,7 @@ def dim_section(obj):\n def array_section(obj):\n     # \"unique\" id to expand/collapse the section\n     data_id = \"section-\" + str(uuid.uuid4())\n-    collapsed = \"\"\n+    collapsed = \"checked\"\n     variable = getattr(obj, \"variable\", obj)\n     preview = escape(inline_variable_array_repr(variable, max_width=70))\n     data_repr = short_data_repr_html(obj)\n",
        "test_patch": "diff --git a/xarray/tests/test_formatting_html.py b/xarray/tests/test_formatting_html.py\n--- a/xarray/tests/test_formatting_html.py\n+++ b/xarray/tests/test_formatting_html.py\n@@ -108,8 +108,8 @@ def test_summarize_attrs_with_unsafe_attr_name_and_value():\n def test_repr_of_dataarray(dataarray):\n     formatted = fh.array_repr(dataarray)\n     assert \"dim_0\" in formatted\n-    # has an expandable data section\n-    assert formatted.count(\"class='xr-array-in' type='checkbox' >\") == 1\n+    # has an expanded data section\n+    assert formatted.count(\"class='xr-array-in' type='checkbox' checked>\") == 1\n     # coords and attrs don't have an items so they'll be be disabled and collapsed\n     assert (\n         formatted.count(\"class='xr-section-summary-in' type='checkbox' disabled >\") == 2\n",
        "problem_statement": "Pre-expand data and attributes in DataArray/Variable HTML repr?\n## Proposal\r\n\r\nGiven that a major purpose for plotting an array is to look at data or attributes, I wonder if we should expand these sections by default?\r\n- I worry that clicking on icons to expand sections may not be easy to discover\r\n- This would also be consistent with the text repr, which shows these sections by default (the Dataset repr is already consistent by default between text and HTML already)\r\n\r\n## Context\r\n\r\nCurrently the HTML repr for DataArray/Variable looks like this:\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image shows a Jupyter notebook cell with the output of the `xarray.tutorial.load_dataset('air_temperature').air` command. The output is an `xarray.DataArray` named 'air' with dimensions 'time', 'lat', and 'lon'. The data is displayed in a tabular format with partial values shown. The coordinates for 'lat', 'lon', and 'time' are also displayed, with 'lat' and 'lon' being float32 arrays and 'time' being a datetime64 array. The attributes section is collapsed.\n- **Analysis**: \nThis image shows the output of loading a dataset using xarray in a Jupyter notebook. The dataset is named 'air_temperature' and is represented as an xarray.DataArray. The image captures the structure of the dataset, including the coordinates (lat, lon, time) and the data array. It is necessary for documenting the issue because it provides a visual representation of the dataset's structure and contents, which is crucial for understanding how the dataset is being handled in the code. The technical details revealed include the dimensions of the dataset (2920 time points, 25 latitude points, 53 longitude points), the data type (float32), and the time range (from 2013-01-01 to 2014-12-31T18:00:00). These details are important for troubleshooting any issues related to data loading or manipulation. The image strengthens the overall issue documentation by providing a clear and concise visual summary of the dataset, which can help developers quickly grasp the dataset's structure and contents.\n---\r\n\r\nTo see array data, you have to click on the This image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 2\n- **Contextual Description**: \n\n- **Analysis**: \n\n--- icon:\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 3\n- **Contextual Description**: \nThis image is a close-up view of the data array output from the same Jupyter notebook cell as in image 1. It shows the full array data in a nested list format, with each element being a float32 value. The coordinates for 'lat', 'lon', and 'time' are displayed at the bottom, similar to image 1.\n- **Analysis**: \nThis image provides a detailed view of the data array within the 'air_temperature' dataset. It shows the actual numerical values of the air temperature at different time points, latitude, and longitude coordinates. The image is necessary for documenting the issue because it allows developers to inspect the specific data values and their distribution, which is essential for understanding any potential data anomalies or inconsistencies. The technical details revealed include the specific temperature values and their arrangement in the array. These details are crucial for troubleshooting issues related to data accuracy or data manipulation. The image strengthens the overall issue documentation by providing a detailed view of the dataset's data values, which can help developers identify any patterns or anomalies in the data.\n---\r\n\r\n(thanks to @max-sixty for making this a little bit more manageably sized in https://github.com/pydata/xarray/pull/3905!)\r\n\r\nThere's also a really nice repr for nested dask arrays:\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 4\n- **Contextual Description**: \nThe image shows a Jupyter notebook cell with the output of the `xarray.tutorial.load_dataset('air_temperature').air.chunk()` command. The output is an `xarray.DataArray` named 'air' with dimensions 'time', 'lat', and 'lon'. The data is displayed in a tabular format with partial values shown. The coordinates for 'lat', 'lon', and 'time' are also displayed, with 'lat' and 'lon' being float32 arrays and 'time' being a datetime64 array. The attributes section is collapsed. Additionally, there is a graphical representation of the chunked array structure on the right side of the output.\n- **Analysis**: \nThis image shows the chunking of the 'air_temperature' dataset using xarray's chunk() method. It provides a visual representation of how the dataset is divided into chunks for efficient computation. The image is necessary for documenting the issue because it demonstrates the use of chunking in the code, which is important for understanding the performance implications of data processing. The technical details revealed include the chunk size (15.48 MB) and the shape of the chunks (2920, 25, 53). These details are significant for troubleshooting issues related to memory usage or computational efficiency. The image strengthens the overall issue documentation by providing a visual summary of the dataset's chunking, which can help developers understand how the data is being processed and optimize their code accordingly.\n---\n### Issue Summary (Structured)\n- **problemSummary**: The issue is about the HTML output of DataArray/Variable in xarray, specifically whether the array data and attributes should be expanded by default for easier discovery and consistency with the text representation.\n- **context**: The current HTML representation for DataArray/Variable requires users to click on an icon to expand and view the array data and attributes. There is a proposal to pre-expand these sections by default to enhance discoverability and align with the text representation where these sections are shown by default.\n- **expectedResults**: The expected result of the proposal is to improve user experience by making it easier to discover and view the array data and attributes directly in the HTML output without the need for additional clicks.\n- **actualResults**: The actual results before the proposal are that users must click on icons to expand and view the array data and attributes.\n- **supplementaryImages**: ['Images showing the current HTML representation of DataArray/Variable with icons for expansion.', 'Images demonstrating the proposed pre-expanded view of array data and attributes.']\n- **additionalNotes**: The proposal aims to address a potential usability issue by making the output more intuitive and consistent with other representations used in xarray.",
        "hints_text": "@pydata/xarray any opinions here?\nLooks great to me.",
        "created_at": "2020-06-26T02:25:08Z",
        "version": "0.12",
        "FAIL_TO_PASS": "[\"xarray/tests/test_formatting_html.py::test_repr_of_dataarray\"]",
        "PASS_TO_PASS": "[\"xarray/tests/test_formatting_html.py::test_short_data_repr_html\", \"xarray/tests/test_formatting_html.py::test_short_data_repr_html_non_str_keys\", \"xarray/tests/test_formatting_html.py::test_short_data_repr_html_dask\", \"xarray/tests/test_formatting_html.py::test_format_dims_no_dims\", \"xarray/tests/test_formatting_html.py::test_format_dims_unsafe_dim_name\", \"xarray/tests/test_formatting_html.py::test_format_dims_non_index\", \"xarray/tests/test_formatting_html.py::test_format_dims_index\", \"xarray/tests/test_formatting_html.py::test_summarize_attrs_with_unsafe_attr_name_and_value\", \"xarray/tests/test_formatting_html.py::test_summary_of_multiindex_coord\", \"xarray/tests/test_formatting_html.py::test_repr_of_multiindex\", \"xarray/tests/test_formatting_html.py::test_repr_of_dataset\", \"xarray/tests/test_formatting_html.py::test_repr_text_fallback\", \"xarray/tests/test_formatting_html.py::test_variable_repr_html\"]",
        "environment_setup_commit": "1c198a191127c601d091213c4b3292a8bb3054e1"
    },
    {
        "repo": "pydata/xarray",
        "instance_id": "pydata__xarray-5682",
        "base_commit": "2705c63e0c03a21d2bbce3a337fac60dd6f6da59",
        "patch": "diff --git a/xarray/plot/utils.py b/xarray/plot/utils.py\n--- a/xarray/plot/utils.py\n+++ b/xarray/plot/utils.py\n@@ -490,7 +490,13 @@ def _get_units_from_attrs(da):\n     else:\n         units = _get_units_from_attrs(da)\n \n-    return \"\\n\".join(textwrap.wrap(name + extra + units, 30))\n+    # Treat `name` differently if it's a latex sequence\n+    if name.startswith(\"$\") and (name.count(\"$\") % 2 == 0):\n+        return \"$\\n$\".join(\n+            textwrap.wrap(name + extra + units, 60, break_long_words=False)\n+        )\n+    else:\n+        return \"\\n\".join(textwrap.wrap(name + extra + units, 30))\n \n \n def _interval_to_mid_points(array):\n",
        "test_patch": "diff --git a/xarray/tests/test_plot.py b/xarray/tests/test_plot.py\n--- a/xarray/tests/test_plot.py\n+++ b/xarray/tests/test_plot.py\n@@ -2950,3 +2950,10 @@ def test_datarray_scatter(x, y, z, hue, markersize, row, col, add_legend, add_co\n             add_legend=add_legend,\n             add_colorbar=add_colorbar,\n         )\n+\n+\n+def test_latex_name_isnt_split():\n+    da = xr.DataArray()\n+    long_latex_name = r\"$Ra_s = \\mathrm{mean}(\\epsilon_k) / \\mu M^2_\\infty$\"\n+    da.attrs = dict(long_name=long_latex_name)\n+    assert label_from_attrs(da) == long_latex_name\n",
        "problem_statement": "Complex LaTeX expressions in `long_name`s aren't rendered correctly when plotting\n<!-- Please include a self-contained copy-pastable example that generates the issue if possible.\r\n\r\nPlease be concise with code posted. See guidelines below on how to provide a good bug report:\r\n\r\n- Craft Minimal Bug Reports: http://matthewrocklin.com/blog/work/2018/02/28/minimal-bug-reports\r\n- Minimal Complete Verifiable Examples: https://stackoverflow.com/help/mcve\r\n\r\nBug reports that follow these guidelines are easier to diagnose, and so are often handled much more quickly.\r\n-->\r\n\r\n**What happened**:\r\n\r\nWhen I try to give a variable a `long_name` that's a complex latex expression and then plot that variable the expression doesn't get rendered by latex\r\n\r\n**What you expected to happen**:\r\n\r\nI expected the name to get rendered by latex\r\n\r\n**Minimal Complete Verifiable Example**:\r\n\r\nIn the example below I'm plotting a variable with a complex `long_name` via xarray and then plotting it again (in a separate figure) using only matplotlib and manually setting `xlabel()`. The matplotlib-only version works fine (right), but the xarray version doesn't render (left).\r\n\r\n```python\r\nimport numpy as np\r\nfrom matplotlib import pyplot as plt\r\nimport xarray as xr\r\nda = xr.DataArray(range(5), dims=\"x\", coords = dict(x=range(5)))\r\nname = r\"$Ra_s = \\mathrm{mean}(\\epsilon_k) / \\mu M^2_\\infty$\"\r\nda.x.attrs = dict(long_name = name)\r\nda.plot()\r\n\r\nplt.figure()\r\nplt.plot(range(5))\r\nplt.xlabel(name)\r\n```\r\n\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \n\n- **Analysis**: \nThe image shows two plots generated using different methods, highlighting an issue with LaTeX rendering in xarray plots. The left plot, generated with xarray, fails to render the complex LaTeX expression in the variable's `long_name`. The right plot, generated with matplotlib, correctly renders the same LaTeX expression. This image directly demonstrates the reported issue of LaTeX rendering failure in xarray plots. The technical value lies in the comparison between the two plots, showing the expected behavior (right plot) and the actual behavior (left plot). The image is crucial for documenting the issue as it visually confirms the problem and provides a clear example for developers to understand and address the rendering failure.\n---\r\n\r\n\r\n**Anything else we need to know?**:\r\n\r\n**Environment**:\r\n\r\n<details><summary>Output of <tt>xr.show_versions()</tt></summary>\r\n\r\nINSTALLED VERSIONS\r\n------------------\r\ncommit: None\r\npython: 3.9.2 (default, Mar  3 2021, 20:02:32) \r\n[GCC 7.3.0]\r\npython-bits: 64\r\nOS: Linux\r\nOS-release: 5.10.53-1-MANJARO\r\nmachine: x86_64\r\nprocessor: \r\nbyteorder: little\r\nLC_ALL: None\r\nLANG: en_US.UTF-8\r\nLOCALE: en_US.UTF-8\r\nlibhdf5: 1.10.6\r\nlibnetcdf: 4.6.1\r\n\r\nxarray: 0.17.0\r\npandas: 1.2.3\r\nnumpy: 1.19.2\r\nscipy: 1.5.3\r\nnetCDF4: 1.5.6\r\npydap: None\r\nh5netcdf: None\r\nh5py: None\r\nNio: None\r\nzarr: None\r\ncftime: 1.2.1\r\nnc_time_axis: None\r\nPseudoNetCDF: None\r\nrasterio: None\r\ncfgrib: None\r\niris: None\r\nbottleneck: 1.3.2\r\ndask: 2021.04.0\r\ndistributed: 2021.04.0\r\nmatplotlib: 3.3.4\r\ncartopy: 0.18.0\r\nseaborn: None\r\nnumbagg: None\r\npint: 0.17\r\nsetuptools: 52.0.0.post20210125\r\npip: 21.0.1\r\nconda: None\r\npytest: None\r\nIPython: 7.22.0\r\nsphinx: None\r\n\r\n\r\n</details>\r\n\n\n### Issue Summary (Structured)\n- **problemSummary**: Complex LaTeX expressions in `long_name`s are not rendered correctly when plotting using xarray.\n- **context**: The user expected that the LaTeX expression in the `long_name` of a variable would be rendered correctly when plotted using xarray. However, the expression is not rendered, and the plot only shows unrendered LaTeX code.\n- **stepsToReproduce**: ['Create a DataArray with a complex LaTeX expression in the `long_name` attribute.', 'Plot the DataArray using xarray.']\n- **expectedResults**: The LaTeX expression should be rendered correctly in the plot.\n- **actualResults**: The LaTeX expression is not rendered, and the plot shows the unrendered LaTeX code.\n- **supplementaryImages**: ['Two plots are provided, one with the unrendered LaTeX expression (left) and the other with the correctly rendered expression using matplotlib (right).']\n- **additionalNotes**: The issue does not occur when the same LaTeX expression is used in a matplotlib plot without xarray.",
        "hints_text": "Note that for simple latex expressions xarray appears to work fine. For example `name = r\"$\\mathrm{mean}(\\epsilon_k)$\"` works in both figures in the example above.\nI agree this is annoying but there is no good solution AFAIK.\r\n\r\nWe use textwrap here:\r\nhttps://github.com/pydata/xarray/blob/8b95da8e21a9d31de9f79cb0506720595f49e1dd/xarray/plot/utils.py#L493\r\n\r\nI guess we could skip it if the first character in `name` is `$`?\nI'm not entirely sure why that would make the LaTeX renderer fail. But if that's the case and skipping it is an option, I'd test that both the first and last characters are `$` before skipping.\nIt's the newline join that's the problem. You can get the latex working as textwrap intends by using `\"$\\n$\".join`\r\n\r\n```python\r\nimport numpy as np\r\nfrom matplotlib import pyplot as plt\r\nimport xarray as xr\r\nda = xr.DataArray(range(5), dims=\"x\", coords = dict(x=range(5)))\r\nname = r\"$Ra_s = \\mathrm{mean}(\\epsilon_k) / \\mu M^2_\\infty$\"\r\nname = \"$\\n$\".join(textwrap.wrap(name, 30))\r\nda.x.attrs = dict(long_name = name)\r\nda.plot()\r\n\r\nplt.figure()\r\nplt.plot(range(5))\r\nplt.xlabel(name)\r\n```\r\nBut that looks worse than the original, checking if the string is latex-able seems a good idea.",
        "created_at": "2021-08-07T14:18:16Z",
        "version": "0.19",
        "FAIL_TO_PASS": "[\"xarray/tests/test_plot.py::test_latex_name_isnt_split\"]",
        "PASS_TO_PASS": "[\"xarray/tests/test_plot.py::TestPlot::test_accessor\", \"xarray/tests/test_plot.py::TestPlot::test_label_from_attrs\", \"xarray/tests/test_plot.py::TestPlot::test1d\", \"xarray/tests/test_plot.py::TestPlot::test_1d_bool\", \"xarray/tests/test_plot.py::TestPlot::test_1d_x_y_kw\", \"xarray/tests/test_plot.py::TestPlot::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestPlot::test_infer_line_data\", \"xarray/tests/test_plot.py::TestPlot::test_line_plot_along_1d_coord\", \"xarray/tests/test_plot.py::TestPlot::test_line_plot_wrong_hue\", \"xarray/tests/test_plot.py::TestPlot::test_2d_line\", \"xarray/tests/test_plot.py::TestPlot::test_2d_line_accepts_legend_kw\", \"xarray/tests/test_plot.py::TestPlot::test_2d_line_accepts_x_kw\", \"xarray/tests/test_plot.py::TestPlot::test_2d_line_accepts_hue_kw\", \"xarray/tests/test_plot.py::TestPlot::test_2d_coords_line_plot\", \"xarray/tests/test_plot.py::TestPlot::test_2d_coord_line_plot_coords_transpose_invariant\", \"xarray/tests/test_plot.py::TestPlot::test_2d_before_squeeze\", \"xarray/tests/test_plot.py::TestPlot::test2d_uniform_calls_imshow\", \"xarray/tests/test_plot.py::TestPlot::test2d_1d_2d_coordinates_contourf\", \"xarray/tests/test_plot.py::TestPlot::test2d_1d_2d_coordinates_pcolormesh\", \"xarray/tests/test_plot.py::TestPlot::test_contourf_cmap_set\", \"xarray/tests/test_plot.py::TestPlot::test_contourf_cmap_set_with_bad_under_over\", \"xarray/tests/test_plot.py::TestPlot::test3d\", \"xarray/tests/test_plot.py::TestPlot::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestPlot::test__infer_interval_breaks\", \"xarray/tests/test_plot.py::TestPlot::test__infer_interval_breaks_logscale\", \"xarray/tests/test_plot.py::TestPlot::test__infer_interval_breaks_logscale_invalid_coords\", \"xarray/tests/test_plot.py::TestPlot::test_geo_data\", \"xarray/tests/test_plot.py::TestPlot::test_datetime_dimension\", \"xarray/tests/test_plot.py::TestPlot::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestPlot::test_subplot_kws\", \"xarray/tests/test_plot.py::TestPlot::test_plot_size\", \"xarray/tests/test_plot.py::TestPlot::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestPlot::test_coord_with_interval\", \"xarray/tests/test_plot.py::TestPlot::test_coord_with_interval_x\", \"xarray/tests/test_plot.py::TestPlot::test_coord_with_interval_y\", \"xarray/tests/test_plot.py::TestPlot::test_coord_with_interval_xy\", \"xarray/tests/test_plot.py::TestPlot::test_labels_with_units_with_interval[x]\", \"xarray/tests/test_plot.py::TestPlot::test_labels_with_units_with_interval[y]\", \"xarray/tests/test_plot.py::TestPlot1D::test_xlabel_is_index_name\", \"xarray/tests/test_plot.py::TestPlot1D::test_no_label_name_on_x_axis\", \"xarray/tests/test_plot.py::TestPlot1D::test_no_label_name_on_y_axis\", \"xarray/tests/test_plot.py::TestPlot1D::test_ylabel_is_data_name\", \"xarray/tests/test_plot.py::TestPlot1D::test_xlabel_is_data_name\", \"xarray/tests/test_plot.py::TestPlot1D::test_format_string\", \"xarray/tests/test_plot.py::TestPlot1D::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestPlot1D::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestPlot1D::test_primitive_returned\", \"xarray/tests/test_plot.py::TestPlot1D::test_plot_nans\", \"xarray/tests/test_plot.py::TestPlot1D::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestPlot1D::test_xyincrease_false_changes_axes\", \"xarray/tests/test_plot.py::TestPlot1D::test_slice_in_title\", \"xarray/tests/test_plot.py::TestPlotStep::test_step\", \"xarray/tests/test_plot.py::TestPlotStep::test_step_with_where[pre]\", \"xarray/tests/test_plot.py::TestPlotStep::test_step_with_where[post]\", \"xarray/tests/test_plot.py::TestPlotStep::test_step_with_where[mid]\", \"xarray/tests/test_plot.py::TestPlotStep::test_coord_with_interval_step\", \"xarray/tests/test_plot.py::TestPlotStep::test_coord_with_interval_step_x\", \"xarray/tests/test_plot.py::TestPlotStep::test_coord_with_interval_step_y\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_3d_array\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_xlabel_uses_name\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_title_is_histogram\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_can_pass_in_kwargs\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_primitive_returned\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_plot_nans\", \"xarray/tests/test_plot.py::TestPlotHistogram::test_hist_coord_with_interval\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_robust\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_center\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_cmap_sequential_option\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_cmap_sequential_explicit_option\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_cmap_divergent_option\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_nan_inf_are_ignored\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_integer_levels\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_list_levels\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_divergentcontrol\", \"xarray/tests/test_plot.py::TestDetermineCmapParams::test_norm_sets_vmin_vmax\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_recover_from_seaborn_jet_exception\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_build_discrete_cmap\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_discrete_colormap_list_of_levels\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_discrete_colormap_int_levels\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_discrete_colormap_list_levels_and_vmin_or_vmax\", \"xarray/tests/test_plot.py::TestDiscreteColorMap::test_discrete_colormap_provided_boundary_norm\", \"xarray/tests/test_plot.py::TestContourf::test_label_names\", \"xarray/tests/test_plot.py::TestContourf::test_1d_raises_valueerror\", \"xarray/tests/test_plot.py::TestContourf::test_bool\", \"xarray/tests/test_plot.py::TestContourf::test_complex_raises_typeerror\", \"xarray/tests/test_plot.py::TestContourf::test_3d_raises_valueerror\", \"xarray/tests/test_plot.py::TestContourf::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestContourf::test_multiindex_raises_typeerror\", \"xarray/tests/test_plot.py::TestContourf::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestContourf::test_xyincrease_defaults\", \"xarray/tests/test_plot.py::TestContourf::test_xyincrease_false_changes_axes\", \"xarray/tests/test_plot.py::TestContourf::test_xyincrease_true_changes_axes\", \"xarray/tests/test_plot.py::TestContourf::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestContourf::test_plot_nans\", \"xarray/tests/test_plot.py::TestContourf::test_can_plot_all_nans\", \"xarray/tests/test_plot.py::TestContourf::test_can_plot_axis_size_one\", \"xarray/tests/test_plot.py::TestContourf::test_disallows_rgb_arg\", \"xarray/tests/test_plot.py::TestContourf::test_viridis_cmap\", \"xarray/tests/test_plot.py::TestContourf::test_default_cmap\", \"xarray/tests/test_plot.py::TestContourf::test_seaborn_palette_as_cmap\", \"xarray/tests/test_plot.py::TestContourf::test_can_change_default_cmap\", \"xarray/tests/test_plot.py::TestContourf::test_diverging_color_limits\", \"xarray/tests/test_plot.py::TestContourf::test_xy_strings\", \"xarray/tests/test_plot.py::TestContourf::test_positional_coord_string\", \"xarray/tests/test_plot.py::TestContourf::test_bad_x_string_exception\", \"xarray/tests/test_plot.py::TestContourf::test_coord_strings\", \"xarray/tests/test_plot.py::TestContourf::test_non_linked_coords\", \"xarray/tests/test_plot.py::TestContourf::test_non_linked_coords_transpose\", \"xarray/tests/test_plot.py::TestContourf::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestContourf::test_default_title\", \"xarray/tests/test_plot.py::TestContourf::test_colorbar_default_label\", \"xarray/tests/test_plot.py::TestContourf::test_no_labels\", \"xarray/tests/test_plot.py::TestContourf::test_colorbar_kwargs\", \"xarray/tests/test_plot.py::TestContourf::test_verbose_facetgrid\", \"xarray/tests/test_plot.py::TestContourf::test_2d_function_and_method_signature_same\", \"xarray/tests/test_plot.py::TestContourf::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestContourf::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestContourf::test_facetgrid_map_only_appends_mappables\", \"xarray/tests/test_plot.py::TestContourf::test_facetgrid_cmap\", \"xarray/tests/test_plot.py::TestContourf::test_facetgrid_cbar_kwargs\", \"xarray/tests/test_plot.py::TestContourf::test_facetgrid_no_cbar_ax\", \"xarray/tests/test_plot.py::TestContourf::test_cmap_and_color_both\", \"xarray/tests/test_plot.py::TestContourf::test_2d_coord_with_interval\", \"xarray/tests/test_plot.py::TestContourf::test_colormap_error_norm_and_vmin_vmax\", \"xarray/tests/test_plot.py::TestContourf::test_primitive_artist_returned\", \"xarray/tests/test_plot.py::TestContourf::test_extend\", \"xarray/tests/test_plot.py::TestContourf::test_2d_coord_names\", \"xarray/tests/test_plot.py::TestContourf::test_levels\", \"xarray/tests/test_plot.py::TestContour::test_label_names\", \"xarray/tests/test_plot.py::TestContour::test_1d_raises_valueerror\", \"xarray/tests/test_plot.py::TestContour::test_bool\", \"xarray/tests/test_plot.py::TestContour::test_complex_raises_typeerror\", \"xarray/tests/test_plot.py::TestContour::test_3d_raises_valueerror\", \"xarray/tests/test_plot.py::TestContour::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestContour::test_multiindex_raises_typeerror\", \"xarray/tests/test_plot.py::TestContour::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestContour::test_xyincrease_defaults\", \"xarray/tests/test_plot.py::TestContour::test_xyincrease_false_changes_axes\", \"xarray/tests/test_plot.py::TestContour::test_xyincrease_true_changes_axes\", \"xarray/tests/test_plot.py::TestContour::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestContour::test_plot_nans\", \"xarray/tests/test_plot.py::TestContour::test_can_plot_all_nans\", \"xarray/tests/test_plot.py::TestContour::test_can_plot_axis_size_one\", \"xarray/tests/test_plot.py::TestContour::test_disallows_rgb_arg\", \"xarray/tests/test_plot.py::TestContour::test_viridis_cmap\", \"xarray/tests/test_plot.py::TestContour::test_default_cmap\", \"xarray/tests/test_plot.py::TestContour::test_seaborn_palette_as_cmap\", \"xarray/tests/test_plot.py::TestContour::test_can_change_default_cmap\", \"xarray/tests/test_plot.py::TestContour::test_diverging_color_limits\", \"xarray/tests/test_plot.py::TestContour::test_xy_strings\", \"xarray/tests/test_plot.py::TestContour::test_positional_coord_string\", \"xarray/tests/test_plot.py::TestContour::test_bad_x_string_exception\", \"xarray/tests/test_plot.py::TestContour::test_coord_strings\", \"xarray/tests/test_plot.py::TestContour::test_non_linked_coords\", \"xarray/tests/test_plot.py::TestContour::test_non_linked_coords_transpose\", \"xarray/tests/test_plot.py::TestContour::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestContour::test_default_title\", \"xarray/tests/test_plot.py::TestContour::test_colorbar_default_label\", \"xarray/tests/test_plot.py::TestContour::test_no_labels\", \"xarray/tests/test_plot.py::TestContour::test_colorbar_kwargs\", \"xarray/tests/test_plot.py::TestContour::test_verbose_facetgrid\", \"xarray/tests/test_plot.py::TestContour::test_2d_function_and_method_signature_same\", \"xarray/tests/test_plot.py::TestContour::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestContour::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestContour::test_facetgrid_map_only_appends_mappables\", \"xarray/tests/test_plot.py::TestContour::test_facetgrid_cmap\", \"xarray/tests/test_plot.py::TestContour::test_facetgrid_cbar_kwargs\", \"xarray/tests/test_plot.py::TestContour::test_facetgrid_no_cbar_ax\", \"xarray/tests/test_plot.py::TestContour::test_2d_coord_with_interval\", \"xarray/tests/test_plot.py::TestContour::test_colormap_error_norm_and_vmin_vmax\", \"xarray/tests/test_plot.py::TestContour::test_colors\", \"xarray/tests/test_plot.py::TestContour::test_colors_np_levels\", \"xarray/tests/test_plot.py::TestContour::test_cmap_and_color_both\", \"xarray/tests/test_plot.py::TestContour::test_2d_coord_names\", \"xarray/tests/test_plot.py::TestContour::test_single_level\", \"xarray/tests/test_plot.py::TestPcolormesh::test_label_names\", \"xarray/tests/test_plot.py::TestPcolormesh::test_1d_raises_valueerror\", \"xarray/tests/test_plot.py::TestPcolormesh::test_bool\", \"xarray/tests/test_plot.py::TestPcolormesh::test_complex_raises_typeerror\", \"xarray/tests/test_plot.py::TestPcolormesh::test_3d_raises_valueerror\", \"xarray/tests/test_plot.py::TestPcolormesh::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestPcolormesh::test_multiindex_raises_typeerror\", \"xarray/tests/test_plot.py::TestPcolormesh::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestPcolormesh::test_xyincrease_defaults\", \"xarray/tests/test_plot.py::TestPcolormesh::test_xyincrease_false_changes_axes\", \"xarray/tests/test_plot.py::TestPcolormesh::test_xyincrease_true_changes_axes\", \"xarray/tests/test_plot.py::TestPcolormesh::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestPcolormesh::test_plot_nans\", \"xarray/tests/test_plot.py::TestPcolormesh::test_can_plot_all_nans\", \"xarray/tests/test_plot.py::TestPcolormesh::test_can_plot_axis_size_one\", \"xarray/tests/test_plot.py::TestPcolormesh::test_disallows_rgb_arg\", \"xarray/tests/test_plot.py::TestPcolormesh::test_viridis_cmap\", \"xarray/tests/test_plot.py::TestPcolormesh::test_default_cmap\", \"xarray/tests/test_plot.py::TestPcolormesh::test_seaborn_palette_as_cmap\", \"xarray/tests/test_plot.py::TestPcolormesh::test_can_change_default_cmap\", \"xarray/tests/test_plot.py::TestPcolormesh::test_diverging_color_limits\", \"xarray/tests/test_plot.py::TestPcolormesh::test_xy_strings\", \"xarray/tests/test_plot.py::TestPcolormesh::test_positional_coord_string\", \"xarray/tests/test_plot.py::TestPcolormesh::test_bad_x_string_exception\", \"xarray/tests/test_plot.py::TestPcolormesh::test_coord_strings\", \"xarray/tests/test_plot.py::TestPcolormesh::test_non_linked_coords\", \"xarray/tests/test_plot.py::TestPcolormesh::test_non_linked_coords_transpose\", \"xarray/tests/test_plot.py::TestPcolormesh::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestPcolormesh::test_default_title\", \"xarray/tests/test_plot.py::TestPcolormesh::test_colorbar_default_label\", \"xarray/tests/test_plot.py::TestPcolormesh::test_no_labels\", \"xarray/tests/test_plot.py::TestPcolormesh::test_colorbar_kwargs\", \"xarray/tests/test_plot.py::TestPcolormesh::test_verbose_facetgrid\", \"xarray/tests/test_plot.py::TestPcolormesh::test_2d_function_and_method_signature_same\", \"xarray/tests/test_plot.py::TestPcolormesh::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestPcolormesh::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestPcolormesh::test_facetgrid_map_only_appends_mappables\", \"xarray/tests/test_plot.py::TestPcolormesh::test_facetgrid_cmap\", \"xarray/tests/test_plot.py::TestPcolormesh::test_facetgrid_cbar_kwargs\", \"xarray/tests/test_plot.py::TestPcolormesh::test_facetgrid_no_cbar_ax\", \"xarray/tests/test_plot.py::TestPcolormesh::test_cmap_and_color_both\", \"xarray/tests/test_plot.py::TestPcolormesh::test_2d_coord_with_interval\", \"xarray/tests/test_plot.py::TestPcolormesh::test_colormap_error_norm_and_vmin_vmax\", \"xarray/tests/test_plot.py::TestPcolormesh::test_primitive_artist_returned\", \"xarray/tests/test_plot.py::TestPcolormesh::test_everything_plotted\", \"xarray/tests/test_plot.py::TestPcolormesh::test_2d_coord_names\", \"xarray/tests/test_plot.py::TestPcolormesh::test_dont_infer_interval_breaks_for_cartopy\", \"xarray/tests/test_plot.py::TestPcolormeshLogscale::test_interval_breaks_logspace\", \"xarray/tests/test_plot.py::TestImshow::test_label_names\", \"xarray/tests/test_plot.py::TestImshow::test_1d_raises_valueerror\", \"xarray/tests/test_plot.py::TestImshow::test_bool\", \"xarray/tests/test_plot.py::TestImshow::test_complex_raises_typeerror\", \"xarray/tests/test_plot.py::TestImshow::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestImshow::test_multiindex_raises_typeerror\", \"xarray/tests/test_plot.py::TestImshow::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestImshow::test_xyincrease_defaults\", \"xarray/tests/test_plot.py::TestImshow::test_xyincrease_false_changes_axes\", \"xarray/tests/test_plot.py::TestImshow::test_xyincrease_true_changes_axes\", \"xarray/tests/test_plot.py::TestImshow::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestImshow::test_plot_nans\", \"xarray/tests/test_plot.py::TestImshow::test_can_plot_all_nans\", \"xarray/tests/test_plot.py::TestImshow::test_can_plot_axis_size_one\", \"xarray/tests/test_plot.py::TestImshow::test_disallows_rgb_arg\", \"xarray/tests/test_plot.py::TestImshow::test_viridis_cmap\", \"xarray/tests/test_plot.py::TestImshow::test_default_cmap\", \"xarray/tests/test_plot.py::TestImshow::test_seaborn_palette_as_cmap\", \"xarray/tests/test_plot.py::TestImshow::test_can_change_default_cmap\", \"xarray/tests/test_plot.py::TestImshow::test_diverging_color_limits\", \"xarray/tests/test_plot.py::TestImshow::test_xy_strings\", \"xarray/tests/test_plot.py::TestImshow::test_positional_coord_string\", \"xarray/tests/test_plot.py::TestImshow::test_bad_x_string_exception\", \"xarray/tests/test_plot.py::TestImshow::test_coord_strings\", \"xarray/tests/test_plot.py::TestImshow::test_non_linked_coords\", \"xarray/tests/test_plot.py::TestImshow::test_non_linked_coords_transpose\", \"xarray/tests/test_plot.py::TestImshow::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestImshow::test_default_title\", \"xarray/tests/test_plot.py::TestImshow::test_colorbar_default_label\", \"xarray/tests/test_plot.py::TestImshow::test_no_labels\", \"xarray/tests/test_plot.py::TestImshow::test_colorbar_kwargs\", \"xarray/tests/test_plot.py::TestImshow::test_verbose_facetgrid\", \"xarray/tests/test_plot.py::TestImshow::test_2d_function_and_method_signature_same\", \"xarray/tests/test_plot.py::TestImshow::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestImshow::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestImshow::test_facetgrid_map_only_appends_mappables\", \"xarray/tests/test_plot.py::TestImshow::test_facetgrid_cmap\", \"xarray/tests/test_plot.py::TestImshow::test_facetgrid_cbar_kwargs\", \"xarray/tests/test_plot.py::TestImshow::test_facetgrid_no_cbar_ax\", \"xarray/tests/test_plot.py::TestImshow::test_cmap_and_color_both\", \"xarray/tests/test_plot.py::TestImshow::test_2d_coord_with_interval\", \"xarray/tests/test_plot.py::TestImshow::test_colormap_error_norm_and_vmin_vmax\", \"xarray/tests/test_plot.py::TestImshow::test_imshow_called\", \"xarray/tests/test_plot.py::TestImshow::test_xy_pixel_centered\", \"xarray/tests/test_plot.py::TestImshow::test_default_aspect_is_auto\", \"xarray/tests/test_plot.py::TestImshow::test_cannot_change_mpl_aspect\", \"xarray/tests/test_plot.py::TestImshow::test_primitive_artist_returned\", \"xarray/tests/test_plot.py::TestImshow::test_seaborn_palette_needs_levels\", \"xarray/tests/test_plot.py::TestImshow::test_2d_coord_names\", \"xarray/tests/test_plot.py::TestImshow::test_plot_rgb_image\", \"xarray/tests/test_plot.py::TestImshow::test_plot_rgb_image_explicit\", \"xarray/tests/test_plot.py::TestImshow::test_plot_rgb_faceted\", \"xarray/tests/test_plot.py::TestImshow::test_plot_rgba_image_transposed\", \"xarray/tests/test_plot.py::TestImshow::test_warns_ambigious_dim\", \"xarray/tests/test_plot.py::TestImshow::test_rgb_errors_too_many_dims\", \"xarray/tests/test_plot.py::TestImshow::test_rgb_errors_bad_dim_sizes\", \"xarray/tests/test_plot.py::TestImshow::test_normalize_rgb_imshow\", \"xarray/tests/test_plot.py::TestImshow::test_normalize_rgb_one_arg_error\", \"xarray/tests/test_plot.py::TestImshow::test_imshow_rgb_values_in_valid_range\", \"xarray/tests/test_plot.py::TestImshow::test_regression_rgb_imshow_dim_size_one\", \"xarray/tests/test_plot.py::TestImshow::test_origin_overrides_xyincrease\", \"xarray/tests/test_plot.py::TestSurface::test_label_names\", \"xarray/tests/test_plot.py::TestSurface::test_1d_raises_valueerror\", \"xarray/tests/test_plot.py::TestSurface::test_bool\", \"xarray/tests/test_plot.py::TestSurface::test_complex_raises_typeerror\", \"xarray/tests/test_plot.py::TestSurface::test_3d_raises_valueerror\", \"xarray/tests/test_plot.py::TestSurface::test_nonnumeric_index\", \"xarray/tests/test_plot.py::TestSurface::test_multiindex_raises_typeerror\", \"xarray/tests/test_plot.py::TestSurface::test_xyincrease_defaults\", \"xarray/tests/test_plot.py::TestSurface::test_x_ticks_are_rotated_for_time\", \"xarray/tests/test_plot.py::TestSurface::test_plot_nans\", \"xarray/tests/test_plot.py::TestSurface::test_can_plot_all_nans\", \"xarray/tests/test_plot.py::TestSurface::test_can_plot_axis_size_one\", \"xarray/tests/test_plot.py::TestSurface::test_disallows_rgb_arg\", \"xarray/tests/test_plot.py::TestSurface::test_xy_strings\", \"xarray/tests/test_plot.py::TestSurface::test_positional_coord_string\", \"xarray/tests/test_plot.py::TestSurface::test_bad_x_string_exception\", \"xarray/tests/test_plot.py::TestSurface::test_coord_strings\", \"xarray/tests/test_plot.py::TestSurface::test_non_linked_coords\", \"xarray/tests/test_plot.py::TestSurface::test_non_linked_coords_transpose\", \"xarray/tests/test_plot.py::TestSurface::test_multiindex_level_as_coord\", \"xarray/tests/test_plot.py::TestSurface::test_default_title\", \"xarray/tests/test_plot.py::TestSurface::test_no_labels\", \"xarray/tests/test_plot.py::TestSurface::test_verbose_facetgrid\", \"xarray/tests/test_plot.py::TestSurface::test_2d_function_and_method_signature_same\", \"xarray/tests/test_plot.py::TestSurface::test_convenient_facetgrid_4d\", \"xarray/tests/test_plot.py::TestSurface::test_facetgrid_cmap\", \"xarray/tests/test_plot.py::TestSurface::test_facetgrid_cbar_kwargs\", \"xarray/tests/test_plot.py::TestSurface::test_facetgrid_no_cbar_ax\", \"xarray/tests/test_plot.py::TestSurface::test_2d_coord_with_interval\", \"xarray/tests/test_plot.py::TestSurface::test_colormap_error_norm_and_vmin_vmax\", \"xarray/tests/test_plot.py::TestSurface::test_primitive_artist_returned\", \"xarray/tests/test_plot.py::TestSurface::test_2d_coord_names\", \"xarray/tests/test_plot.py::TestSurface::test_can_pass_in_axis\", \"xarray/tests/test_plot.py::TestSurface::test_seaborn_palette_as_cmap\", \"xarray/tests/test_plot.py::TestSurface::test_convenient_facetgrid\", \"xarray/tests/test_plot.py::TestSurface::test_viridis_cmap\", \"xarray/tests/test_plot.py::TestSurface::test_can_change_default_cmap\", \"xarray/tests/test_plot.py::TestSurface::test_colorbar_default_label\", \"xarray/tests/test_plot.py::TestSurface::test_facetgrid_map_only_appends_mappables\", \"xarray/tests/test_plot.py::TestFacetGrid::test_no_args\", \"xarray/tests/test_plot.py::TestFacetGrid::test_names_appear_somewhere\", \"xarray/tests/test_plot.py::TestFacetGrid::test_text_not_super_long\", \"xarray/tests/test_plot.py::TestFacetGrid::test_colorbar\", \"xarray/tests/test_plot.py::TestFacetGrid::test_empty_cell\", \"xarray/tests/test_plot.py::TestFacetGrid::test_norow_nocol_error\", \"xarray/tests/test_plot.py::TestFacetGrid::test_groups\", \"xarray/tests/test_plot.py::TestFacetGrid::test_float_index\", \"xarray/tests/test_plot.py::TestFacetGrid::test_nonunique_index_error\", \"xarray/tests/test_plot.py::TestFacetGrid::test_robust\", \"xarray/tests/test_plot.py::TestFacetGrid::test_can_set_vmin_vmax\", \"xarray/tests/test_plot.py::TestFacetGrid::test_vmin_vmax_equal\", \"xarray/tests/test_plot.py::TestFacetGrid::test_can_set_norm\", \"xarray/tests/test_plot.py::TestFacetGrid::test_figure_size\", \"xarray/tests/test_plot.py::TestFacetGrid::test_num_ticks\", \"xarray/tests/test_plot.py::TestFacetGrid::test_map\", \"xarray/tests/test_plot.py::TestFacetGrid::test_map_dataset\", \"xarray/tests/test_plot.py::TestFacetGrid::test_set_axis_labels\", \"xarray/tests/test_plot.py::TestFacetGrid::test_facetgrid_colorbar\", \"xarray/tests/test_plot.py::TestFacetGrid::test_facetgrid_polar\", \"xarray/tests/test_plot.py::TestFacetGrid4d::test_default_labels\", \"xarray/tests/test_plot.py::TestFacetedLinePlotsLegend::test_legend_labels\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_facetgrid_shape\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_unnamed_args\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_default_labels\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_test_empty_cell\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_set_axis_labels\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_axes_in_faceted_plot\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_figsize_and_size\", \"xarray/tests/test_plot.py::TestFacetedLinePlots::test_wrong_num_of_dimensions\", \"xarray/tests/test_plot.py::TestDatasetQuiverPlots::test_quiver\", \"xarray/tests/test_plot.py::TestDatasetQuiverPlots::test_facetgrid\", \"xarray/tests/test_plot.py::TestDatasetStreamplotPlots::test_streamline\", \"xarray/tests/test_plot.py::TestDatasetStreamplotPlots::test_facetgrid\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_accessor\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[None-None-False-True]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[False-None-False-False]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[True-None-False-True]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[True-continuous-False-True]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[False-discrete-False-False]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_guide[True-discrete-True-False]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_facetgrid_shape\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_default_labels\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_axes_in_faceted_plot\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_figsize_and_size\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_bad_args[A-B-something-True]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_bad_args[A-B-discrete-True]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_bad_args[A-B-None-True]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_bad_args[A-The\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_bad_args[The\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_facetgrid_hue_style\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_scatter[A-B-x-col]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_scatter[x-row-A-B]\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_non_numeric_legend\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_legend_labels\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_legend_labels_facetgrid\", \"xarray/tests/test_plot.py::TestDatasetScatterPlots::test_add_legend_by_default\", \"xarray/tests/test_plot.py::TestDatetimePlot::test_datetime_line_plot\", \"xarray/tests/test_plot.py::TestCFDatetimePlot::test_cfdatetime_line_plot\", \"xarray/tests/test_plot.py::TestCFDatetimePlot::test_cfdatetime_pcolormesh_plot\", \"xarray/tests/test_plot.py::TestCFDatetimePlot::test_cfdatetime_contour_plot\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[1-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[1-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[2-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[2-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[3-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xincrease_kwarg[3-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[1-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[1-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[2-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[2-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[3-True]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yincrease_kwarg[3-False]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[1-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[1-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[1-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[2-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[2-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[2-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[3-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[3-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_kwarg[3-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[1-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[1-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[1-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[2-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[2-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[2-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[3-linear]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[3-logit]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_kwarg[3-symlog]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_log_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xscale_log_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_log_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yscale_log_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xlim_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xlim_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xlim_kwarg[3]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_ylim_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_ylim_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_ylim_kwarg[3]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xticks_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xticks_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_xticks_kwarg[3]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yticks_kwarg[1]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yticks_kwarg[2]\", \"xarray/tests/test_plot.py::TestAxesKwargs::test_yticks_kwarg[3]\", \"xarray/tests/test_plot.py::test_plot_transposed_nondim_coord[pcolormesh]\", \"xarray/tests/test_plot.py::test_plot_transposed_nondim_coord[contourf]\", \"xarray/tests/test_plot.py::test_plot_transposed_nondim_coord[contour]\", \"xarray/tests/test_plot.py::test_plot_transposes_properly[pcolormesh]\", \"xarray/tests/test_plot.py::test_plot_transposes_properly[imshow]\", \"xarray/tests/test_plot.py::test_facetgrid_single_contour\", \"xarray/tests/test_plot.py::test_get_axis\", \"xarray/tests/test_plot.py::test_get_axis_cartopy\", \"xarray/tests/test_plot.py::test_maybe_gca\", \"xarray/tests/test_plot.py::test_datarray_scatter[A-B-None-None-None-None-None-None-None]\", \"xarray/tests/test_plot.py::test_datarray_scatter[B-A-None-w-None-None-None-True-None]\", \"xarray/tests/test_plot.py::test_datarray_scatter[A-B-z-None-None-None-None-None-None]\", \"xarray/tests/test_plot.py::test_datarray_scatter[B-A-z-w-None-None-None-True-None]\"]",
        "environment_setup_commit": "df7646182b17d829fe9b2199aebf649ddb2ed480"
    },
    {
        "repo": "sphinx-doc/sphinx",
        "instance_id": "sphinx-doc__sphinx-11502",
        "base_commit": "71db08c05197545944949d5aa76cd340e7143627",
        "patch": "diff --git a/sphinx/transforms/i18n.py b/sphinx/transforms/i18n.py\n--- a/sphinx/transforms/i18n.py\n+++ b/sphinx/transforms/i18n.py\n@@ -512,11 +512,6 @@ def apply(self, **kwargs: Any) -> None:\n                 node['raw_entries'] = entries\n                 node['entries'] = new_entries\n \n-        # remove translated attribute that is used for avoiding double translation.\n-        matcher = NodeMatcher(translated=Any)\n-        for translated in self.document.findall(matcher):  # type: nodes.Element\n-            translated.delattr('translated')\n-\n \n class RemoveTranslatableInline(SphinxTransform):\n     \"\"\"\n",
        "test_patch": "diff --git a/tests/test_intl.py b/tests/test_intl.py\n--- a/tests/test_intl.py\n+++ b/tests/test_intl.py\n@@ -615,6 +615,20 @@ def test_gettext_buildr_ignores_only_directive(app):\n         assert expect_msg.id in [m.id for m in actual if m.id]\n \n \n+@sphinx_intl\n+def test_node_translated_attribute(app):\n+    app.build()\n+\n+    expected = 23\n+    translated_nodes = 0\n+\n+    doctree = app.env.get_doctree('admonitions')\n+    for node in doctree.traverse():\n+        if hasattr(node, 'get') and node.get('translated', False):\n+            translated_nodes += 1\n+    assert translated_nodes == expected\n+\n+\n @sphinx_intl\n # use individual shared_result directory to avoid \"incompatible doctree\" error\n @pytest.mark.sphinx(testroot='builder-gettext-dont-rebuild-mo')\n",
        "problem_statement": "Keep 'translated' node attribute\n**Is your feature request related to a problem? Please describe.**\r\n\r\nIn my internationalized documentation, I am adding markers to untranslated or partially translated pages, to warn the user that they can see English content and nudge them to help translating (e.g., like this: \r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image shows a note in French that translates to: 'Note: This page is not yet completely translated (progress: 95%).' This note is likely used to inform users that the content on the page is partially translated, with 95% of the translation completed. The note is relevant to the issue context as it pertains to the feature request for marking partially translated pages in internationalized documentation. The note's presence indicates the need for a solution to highlight untranslated content and encourage user contributions to translation efforts.\n- **Analysis**: \nThis image is a screenshot of a note in French indicating that the page is not yet fully translated, with a progress of 95%. It directly connects to the reported issue by demonstrating the need for a feature to mark partially translated pages in internationalized documentation. The image captures the specific problem of users encountering content in a different language than expected. Including this image is necessary for documenting the issue as it provides a clear example of the user experience that needs to be improved. The technical value lies in the visual representation of the translation status, which helps understand the context of the problem. The image shows the current workaround used by the user, which involves duplicating functionality from the `Locale` transform. This highlights the inefficiency and clumsiness of the current approach, making a case for a more streamlined solution. The documentation importance of this image lies in its ability to visually convey the issue, making it easier for developers to grasp the problem and the desired outcome. It strengthens the overall issue documentation by providing a concrete example of the user experience that needs to be addressed.\n---).\r\n\r\nTo do this, I'm essentially duplicating part of the `Locale` transform. This feels clumsy because the `Locale` transform already knows which nodes are translated and which aren't. In fact, it sets an attribute on the translated ones. However, this attribute is considered internal, so it deletes it at the end:\r\n\r\n```python\r\n        # remove translated attribute that is used for avoiding double translation.\r\n        for translated in self.document.findall(NodeMatcher(translated=Any)):  # type: Element\r\n            translated.delattr('translated')\r\n```\r\n\r\n**Describe the solution you'd like**\r\n\r\nI'd like to know if it would be acceptable to just delete the two lines of code above in order to let extensions know whether a node has been translated.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAdding the functionality for \"untranslated\" markers to Sphinx itself.\r\n\n\n### Issue Summary (Structured)\n- **problemSummary**: The user wants to keep the 'translated' node attribute in their internationalized documentation to add markers to untranslated or partially translated pages.\n- **context**: The user is duplicating part of the `Locale` transform to add markers to untranslated or partially translated pages. They want to avoid this by keeping the 'translated' attribute, which is currently deleted by the `Locale` transform.\n- **stepsToReproduce**: ['Add markers to untranslated or partially translated pages by duplicating part of the `Locale` transform.', \"Realize that the `Locale` transform already knows which nodes are translated and which aren't.\", \"Notice that the 'translated' attribute is deleted at the end of the `Locale` transform.\"]\n- **expectedResults**: The 'translated' attribute is not deleted, allowing the user to add markers to untranslated or partially translated pages without duplicating code.\n- **actualResults**: The 'translated' attribute is deleted, making it difficult to add markers to untranslated or partially translated pages without duplicating code.\n- **additionalNotes**: The user has considered adding the functionality for 'untranslated' markers to Sphinx itself.",
        "hints_text": "By the way, #1246 is related.\nOn second thought, I believe that providing at least a way to access the percentage of translated paragraphs on the entire documentation.\r\n\r\n```restructuredtext\r\n.. warning::\r\n\r\n   This document is not fully translated yet (progress: XXXXX %).\r\n```\r\n\r\nwould be a valuable feature for Sphinx.\r\n\r\nI would like advice on what syntax should be used for the `XXXXX` element. reST primarily provides roles for this sort of inline markup, but ``` :translation-progress:`` ```, with an empty content, sounds a bit awkward...\r\n\r\nMaybe define a substitution `|translation-progress|` like `|today|`?\r\n\r\nAnother question is what would be ideal to get the translation progress of the current *page* (rst/md file, instead of the whole documentation). For HTML, this would be useful. One could also have ``` :page-translation-progress:`` ``` / `|page-translation-progress|`. Actually, this could be a way to alleviate the weirdness of the empty argument: `` :translation-progress:`doc` `` or `` :translation-progress:`page` ``?\r\n\r\nWith that scheme, it's feasible to include a warning in one specific page, and it can also be done at the top of every page using\r\n\r\n```python\r\nrst_prolog = r\"\"\"\r\n.. warning::\r\n   This page is not fully translated yet (progress: XXXXX %).\r\n\"\"\"\r\n```\r\n\r\nalthough how to translate that very warning is another issue (#1260).\r\n\r\nYet\u2026 I wonder if this is ideal. For HTML output, one might want to put the warning in a totally different location than the top of the page, like in the sidebar. Thus, it would also make sense to have a Jinja2 variable in the context for the translation progress.\r\n\r\nOn the other hand, just such a variable does not allow use in output formats other than HTML.\r\n\r\nI'm not quite sure how to best approach this. Any opinions from Sphinx maintainers?\nI've thought about something similar some time ago and I didn't come up with a good idea to solve it. I'd love to see a warning in the page that I'm reading communicating me that's not finished and there may be some paragraphs in the original language. That will avoid lot of confusions to users.\r\n\r\nIn the official translation of the Python documentation to Spanish, we are using `potodo`[^1] to know the translation progress: https://python-docs-es.readthedocs.io/es/3.11/progress.html\r\n\r\nMaybe `potodo` can be distributed as a sphinx extension that exposes all these values and substitutions that you mentioned. I think it could be a really good combination of existing tools. We would just need to put all the glue in between to make it user-friendly and integrated with Sphinx.\r\n\r\n[^1]: https://pypi.org/project/potodo/\npotodo is great, we also use it in python-docs-fr (for which it was originally developed), and I use it in my personal projects too. However, I think the way it works has some shortcomings if the goal is to inform the reader about what remains to be done, as opposed to the translator. potodo basically just parses the po files and prints statistics on them. In particular,\r\n\r\na) Suppose that nobody maintains a translation for some time. Messages keep being added and modified in the original, but the po file isn\u2019t updated. In this case, the po file can remain 100% translated while the documentation is not, until the next run of msgmerge / sphinx-intl update.\r\n\r\n\r\nb) It works per po file. HTML pages will be more granular than that if gettext_compact = True is set in the Sphinx config.\r\n\r\nOn the other hd, since Sphinx only relies on the presence of mo files but not po files, it cannot tell fuzzy strings from untranslated strings.\r\n\r\nOverall, these are different approaches, I think they serve different use cases. This is why I\u2019m trying to see if we can make Sphinx provide info about translation progress.\n> I'd like to know if it would be acceptable to just delete the two lines of code above in order to let extensions know whether a node has been translated.\r\n\r\nSeems reasonable.\r\n\r\nA",
        "created_at": "2023-07-23T14:35:44Z",
        "version": "7.1",
        "FAIL_TO_PASS": "[\"tests/test_intl.py::test_node_translated_attribute\"]",
        "PASS_TO_PASS": "[\"tests/test_intl.py::test_text_emit_warnings\", \"tests/test_intl.py::test_text_warning_node\", \"tests/test_intl.py::test_text_title_underline\", \"tests/test_intl.py::test_text_subdirs\", \"tests/test_intl.py::test_text_inconsistency_warnings\", \"tests/test_intl.py::test_noqa\", \"tests/test_intl.py::test_text_literalblock_warnings\", \"tests/test_intl.py::test_text_definition_terms\", \"tests/test_intl.py::test_text_glossary_term\", \"tests/test_intl.py::test_text_glossary_term_inconsistencies\", \"tests/test_intl.py::test_gettext_section\", \"tests/test_intl.py::test_text_section\", \"tests/test_intl.py::test_text_seealso\", \"tests/test_intl.py::test_text_figure_captions\", \"tests/test_intl.py::test_text_rubric\", \"tests/test_intl.py::test_text_docfields\", \"tests/test_intl.py::test_text_admonitions\", \"tests/test_intl.py::test_gettext_toctree\", \"tests/test_intl.py::test_gettext_table\", \"tests/test_intl.py::test_text_table\", \"tests/test_intl.py::test_text_toctree\", \"tests/test_intl.py::test_gettext_topic\", \"tests/test_intl.py::test_text_topic\", \"tests/test_intl.py::test_gettext_definition_terms\", \"tests/test_intl.py::test_gettext_glossary_terms\", \"tests/test_intl.py::test_gettext_glossary_term_inconsistencies\", \"tests/test_intl.py::test_gettext_literalblock\", \"tests/test_intl.py::test_gettext_buildr_ignores_only_directive\", \"tests/test_intl.py::test_gettext_dont_rebuild_mo\", \"tests/test_intl.py::test_html_meta\", \"tests/test_intl.py::test_html_footnotes\", \"tests/test_intl.py::test_html_undefined_refs\", \"tests/test_intl.py::test_html_index_entries\", \"tests/test_intl.py::test_html_versionchanges\", \"tests/test_intl.py::test_html_docfields\", \"tests/test_intl.py::test_html_template\", \"tests/test_intl.py::test_html_rebuild_mo\", \"tests/test_intl.py::test_xml_footnotes\", \"tests/test_intl.py::test_xml_footnote_backlinks\", \"tests/test_intl.py::test_xml_refs_in_python_domain\", \"tests/test_intl.py::test_xml_keep_external_links\", \"tests/test_intl.py::test_xml_role_xref\", \"tests/test_intl.py::test_xml_warnings\", \"tests/test_intl.py::test_xml_label_targets\", \"tests/test_intl.py::test_additional_targets_should_not_be_translated\", \"tests/test_intl.py::test_additional_targets_should_be_translated\", \"tests/test_intl.py::test_text_references\", \"tests/test_intl.py::test_image_glob_intl\", \"tests/test_intl.py::test_image_glob_intl_using_figure_language_filename\", \"tests/test_intl.py::test_gettext_allow_fuzzy_translations\", \"tests/test_intl.py::test_gettext_disallow_fuzzy_translations\", \"tests/test_intl.py::test_customize_system_message\", \"tests/test_intl.py::test_customize_today_date_format\"]",
        "environment_setup_commit": "89808c6f49e1738765d18309244dca0156ee28f6"
    },
    {
        "repo": "sphinx-doc/sphinx",
        "instance_id": "sphinx-doc__sphinx-9320",
        "base_commit": "e05cef574b8f23ab1b57f57e7da6dee509a4e230",
        "patch": "diff --git a/sphinx/cmd/quickstart.py b/sphinx/cmd/quickstart.py\n--- a/sphinx/cmd/quickstart.py\n+++ b/sphinx/cmd/quickstart.py\n@@ -95,6 +95,12 @@ def is_path(x: str) -> str:\n     return x\n \n \n+def is_path_or_empty(x: str) -> str:\n+    if x == '':\n+        return x\n+    return is_path(x)\n+\n+\n def allow_empty(x: str) -> str:\n     return x\n \n@@ -223,7 +229,7 @@ def ask_user(d: Dict) -> None:\n         print(__('sphinx-quickstart will not overwrite existing Sphinx projects.'))\n         print()\n         d['path'] = do_prompt(__('Please enter a new root path (or just Enter to exit)'),\n-                              '', is_path)\n+                              '', is_path_or_empty)\n         if not d['path']:\n             sys.exit(1)\n \n",
        "test_patch": "diff --git a/tests/test_quickstart.py b/tests/test_quickstart.py\n--- a/tests/test_quickstart.py\n+++ b/tests/test_quickstart.py\n@@ -10,6 +10,7 @@\n \n import time\n from io import StringIO\n+from os import path\n \n import pytest\n \n@@ -250,3 +251,18 @@ def test_extensions(tempdir):\n     ns = {}\n     exec(conffile.read_text(), ns)\n     assert ns['extensions'] == ['foo', 'bar', 'baz']\n+\n+\n+def test_exits_when_existing_confpy(monkeypatch):\n+    # The code detects existing conf.py with path.isfile() \n+    # so we mock it as True with pytest's monkeypatch\n+    def mock_isfile(path):\n+        return True\n+    monkeypatch.setattr(path, 'isfile', mock_isfile)\n+\n+    qs.term_input = mock_input({\n+        'Please enter a new root path (or just Enter to exit)': ''\n+    })\n+    d = {}\n+    with pytest.raises(SystemExit):\n+        qs.ask_user(d)\n",
        "problem_statement": "`sphinx-quickstart` with existing conf.py doesn't exit easily\n**Describe the bug**\r\nI've attached a screenshot in the screenshots section which I think explains the bug better.\r\n\r\n- I'm running `sphinx-quickstart` in a folder with a conf.py already existing. \r\n- It says *\"Please enter a new root path name (or just Enter to exit)\"*. \r\n- However, upon pressing 'Enter' it returns an error message *\"Please enter a valid path name\"*. \r\n\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n$ sphinx-quickstart\r\n$ sphinx-quickstart\r\n```\r\n\r\n**Expected behavior**\r\nAfter pressing Enter, sphinx-quickstart exits. \r\n\r\n**Your project**\r\nn/a\r\n\r\n**Screenshots**\r\n\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image shows a terminal window with a command prompt and a series of commands and responses. The user is in a directory named 'base' and has run the 'ls' command, listing the files and directories in the current directory, which include '_build', 'conf.py', 'index.rst', 'make.bat', 'Makefile', '_static', and '_templates'. The user then runs the command 'sphinx-quickstart', which is a utility for setting up a new Sphinx project. The utility prompts the user to enter values for various settings, starting with the root path. The user selects the current directory as the root path, but an error message appears stating 'Error: an existing conf.py has been found in the selected root path. sphinx-quickstart will not overwrite existing Sphinx projects.' The utility then prompts the user to enter a new root path name or press Enter to exit. The user presses Enter, but instead of exiting, the utility prompts again with the message 'Please enter a valid path name.' This indicates a bug where the utility does not properly handle the case where the user presses Enter to exit the prompt.\n- **Analysis**: \nThis image directly demonstrates the reported issue by showing the terminal output when attempting to run `sphinx-quickstart` in a directory that already contains a `conf.py` file. The image captures the error message stating that `sphinx-quickstart` will not overwrite existing Sphinx projects and prompts the user to enter a new root path. The image also shows the user pressing Enter in response to the prompt, which is expected to exit the command, but instead, it results in an error message asking for a valid path name. This image is necessary for documenting the issue because it visually confirms the behavior described in the bug report, providing concrete evidence of the problem. The technical value of this image lies in its demonstration of the specific error message and the sequence of prompts and responses, which are crucial for understanding the issue. It highlights the unexpected behavior of the command not exiting properly after pressing Enter. For documentation and troubleshooting, developers should focus on the error message and the sequence of prompts and responses shown in the image, as these details are essential for identifying and resolving the issue.\n---\r\nI press Enter for the first prompt.\r\n\r\n\r\n**Environment info**\r\n- OS: Ubuntu 20.04\r\n- Python version: Python 3.8.5\r\n- Sphinx version: sphinx-build 3.2.1 \r\n- Sphinx extensions:  none\r\n- Extra tools: none\r\n\r\n**Additional context**\r\nI had a quick search but couldn't find any similar existing issues. Sorry if this is a duplicate.\r\n\n\n### Issue Summary (Structured)\n- **problemSummary**: When running `sphinx-quickstart` in a folder with an existing `conf.py`, the utility does not exit as expected upon pressing 'Enter' for the prompt.\n- **context**: The user is attempting to use the `sphinx-quickstart` utility to set up a new Sphinx project, but an existing `conf.py` file is causing the utility to prompt for a new root path, which does not allow for an easy exit.\n- **stepsToReproduce**: ['Run `sphinx-quickstart` in a folder with an existing `conf.py` file.', \"The utility will prompt to enter a new root path or exit with 'Enter'.\", \"Pressing 'Enter' results in an error message 'Please enter a valid path name.' instead of exiting.\"]\n- **expectedResults**: The utility should exit after pressing 'Enter' for the prompt.\n- **actualResults**: The utility prompts for a valid path name after pressing 'Enter'.\n- **supplementaryImages**: [\"Screenshots of the utility's prompts and error messages are provided.\"]\n- **additionalNotes**: The issue occurs on Ubuntu 20.04 with Python 3.8.5 and Sphinx 3.2.1, and no additional tools are involved.",
        "hints_text": "I could try fix this myself (maybe?)\nGood catch @dogenstein! In my opinion, if the selected path already has a `conf.py`, `sphinx-quickstart` should exit with status 1 immediately.",
        "created_at": "2021-06-11T13:29:04Z",
        "version": "4.1",
        "FAIL_TO_PASS": "[\"tests/test_quickstart.py::test_exits_when_existing_confpy\"]",
        "PASS_TO_PASS": "[\"tests/test_quickstart.py::test_do_prompt\", \"tests/test_quickstart.py::test_do_prompt_inputstrip\", \"tests/test_quickstart.py::test_do_prompt_with_nonascii\", \"tests/test_quickstart.py::test_quickstart_defaults\", \"tests/test_quickstart.py::test_quickstart_all_answers\", \"tests/test_quickstart.py::test_generated_files_eol\", \"tests/test_quickstart.py::test_quickstart_and_build\", \"tests/test_quickstart.py::test_default_filename\", \"tests/test_quickstart.py::test_extensions\"]",
        "environment_setup_commit": "9a2c3c4a1559e37e95fdee88c128bb116642c897"
    },
    {
        "repo": "sphinx-doc/sphinx",
        "instance_id": "sphinx-doc__sphinx-9698",
        "base_commit": "f050a7775dfc9000f55d023d36d925a8d02ccfa8",
        "patch": "diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py\n--- a/sphinx/domains/python.py\n+++ b/sphinx/domains/python.py\n@@ -796,7 +796,7 @@ def get_index_text(self, modname: str, name_cls: Tuple[str, str]) -> str:\n         if 'classmethod' in self.options:\n             return _('%s() (%s class method)') % (methname, clsname)\n         elif 'property' in self.options:\n-            return _('%s() (%s property)') % (methname, clsname)\n+            return _('%s (%s property)') % (methname, clsname)\n         elif 'staticmethod' in self.options:\n             return _('%s() (%s static method)') % (methname, clsname)\n         else:\n",
        "test_patch": "diff --git a/tests/test_domain_py.py b/tests/test_domain_py.py\n--- a/tests/test_domain_py.py\n+++ b/tests/test_domain_py.py\n@@ -756,7 +756,7 @@ def test_pymethod_options(app):\n \n     # :property:\n     assert_node(doctree[1][1][8], addnodes.index,\n-                entries=[('single', 'meth5() (Class property)', 'Class.meth5', '', None)])\n+                entries=[('single', 'meth5 (Class property)', 'Class.meth5', '', None)])\n     assert_node(doctree[1][1][9], ([desc_signature, ([desc_annotation, (\"property\", desc_sig_space)],\n                                                      [desc_name, \"meth5\"])],\n                                    [desc_content, ()]))\n",
        "problem_statement": "An index entry with parens was registered for `py:method` directive with `:property:` option\n### Describe the bug\n\nAn index entry with parens was registered for `py:method` directive with `:property:` option. It should not have parens.\r\n\n\n### How to Reproduce\n\n```\r\n# index.rst\r\n\r\n.. py:method:: Foo.bar\r\n   :property:\r\n\r\n.. py:property:: Foo.baz\r\n```\n\n### Expected behavior\n\nAn index entry for the property should not have parens.\n\n### Your project\n\nN/A\n\n### Screenshots\n\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image shows an index page with two entries under the letter 'B'. The first entry is 'bar() (Foo property)' and the second entry is 'baz (Foo property)'. The text is displayed in a simple, clean format with the index heading 'Index' at the top and the letter 'B' in bold below it. The entries are listed in two columns, with 'bar() (Foo property)' on the left and 'baz (Foo property)' on the right. The parentheses around 'bar()' indicate that it is a method, while the lack of parentheses around 'baz' suggests it is a property. This image is relevant to the issue as it demonstrates the incorrect formatting of the index entry for the 'bar' method, which should not have parentheses around it.\n- **Analysis**: \nThis image shows the index entry with parentheses for the `Foo.bar` property, which is the reported issue. The image directly demonstrates the problem described in the issue report, where an index entry with parentheses was registered for a `py:method` directive with the `:property:` option. The image captures the specific aspect of the issue, highlighting the incorrect formatting of the index entry. Including this image is necessary for documenting the issue because it provides a visual confirmation of the problem, making it easier for developers to understand and verify the reported issue. The technical value of this image lies in its ability to clearly show the incorrect formatting of the index entry, which is crucial for troubleshooting and resolving the issue. The image strengthens the overall issue documentation by providing a concrete example of the problem, ensuring that developers have a clear understanding of what needs to be fixed. Critical details to focus on when reviewing this image include the presence of parentheses around the property name in the index entry, which should not be there according to the expected behavior.\n---\r\n\n\n### OS\n\nMac\n\n### Python version\n\n3.9.6\n\n### Sphinx version\n\nHEAD of 4.x\n\n### Sphinx extensions\n\n_No response_\n\n### Extra tools\n\n_No response_\n\n### Additional context\n\n_No response_\n\n### Issue Summary (Structured)\n- **problemSummary**: An index entry with parentheses was registered for the `py:method` directive with the `:property:` option, which should not have parentheses.\n- **context**: This issue occurs in the context of Sphinx documentation.\n- **stepsToReproduce**: ['Create a file named `index.rst`.', 'Add the following content to the file: `.. py:method:: Foo.bar :property: .. py:property:: Foo.baz`', 'Build the Sphinx documentation.']\n- **expectedResults**: The index entry for the property should not have parentheses.\n- **actualResults**: The index entry for the property has parentheses.\n- **supplementaryImages**: ['An image of the index entry showing the parentheses.']\n- **additionalNotes**: This issue was reported for OS X with Python 3.9.6 and Sphinx version HEAD of 4.x.",
        "hints_text": "",
        "created_at": "2021-10-03T04:04:04Z",
        "version": "4.3",
        "FAIL_TO_PASS": "[\"tests/test_domain_py.py::test_pymethod_options\"]",
        "PASS_TO_PASS": "[\"tests/test_domain_py.py::test_function_signatures\", \"tests/test_domain_py.py::test_domain_py_xrefs\", \"tests/test_domain_py.py::test_domain_py_xrefs_abbreviations\", \"tests/test_domain_py.py::test_domain_py_objects\", \"tests/test_domain_py.py::test_resolve_xref_for_properties\", \"tests/test_domain_py.py::test_domain_py_find_obj\", \"tests/test_domain_py.py::test_domain_py_canonical\", \"tests/test_domain_py.py::test_get_full_qualified_name\", \"tests/test_domain_py.py::test_parse_annotation\", \"tests/test_domain_py.py::test_parse_annotation_Literal\", \"tests/test_domain_py.py::test_pyfunction_signature\", \"tests/test_domain_py.py::test_pyfunction_signature_full\", \"tests/test_domain_py.py::test_pyfunction_signature_full_py38\", \"tests/test_domain_py.py::test_pyfunction_with_number_literals\", \"tests/test_domain_py.py::test_pyfunction_with_union_type_operator\", \"tests/test_domain_py.py::test_optional_pyfunction_signature\", \"tests/test_domain_py.py::test_pyexception_signature\", \"tests/test_domain_py.py::test_pydata_signature\", \"tests/test_domain_py.py::test_pydata_signature_old\", \"tests/test_domain_py.py::test_pydata_with_union_type_operator\", \"tests/test_domain_py.py::test_pyobject_prefix\", \"tests/test_domain_py.py::test_pydata\", \"tests/test_domain_py.py::test_pyfunction\", \"tests/test_domain_py.py::test_pyclass_options\", \"tests/test_domain_py.py::test_pyclassmethod\", \"tests/test_domain_py.py::test_pystaticmethod\", \"tests/test_domain_py.py::test_pyattribute\", \"tests/test_domain_py.py::test_pyproperty\", \"tests/test_domain_py.py::test_pydecorator_signature\", \"tests/test_domain_py.py::test_pydecoratormethod_signature\", \"tests/test_domain_py.py::test_canonical\", \"tests/test_domain_py.py::test_canonical_definition_overrides\", \"tests/test_domain_py.py::test_canonical_definition_skip\", \"tests/test_domain_py.py::test_canonical_duplicated\", \"tests/test_domain_py.py::test_info_field_list\", \"tests/test_domain_py.py::test_info_field_list_piped_type\", \"tests/test_domain_py.py::test_info_field_list_var\", \"tests/test_domain_py.py::test_module_index\", \"tests/test_domain_py.py::test_module_index_submodule\", \"tests/test_domain_py.py::test_module_index_not_collapsed\", \"tests/test_domain_py.py::test_modindex_common_prefix\", \"tests/test_domain_py.py::test_noindexentry\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names\", \"tests/test_domain_py.py::test_python_python_use_unqualified_type_names_disabled\", \"tests/test_domain_py.py::test_warn_missing_reference\"]",
        "environment_setup_commit": "6c6cc8a6f50b18331cb818160d168d7bb9c03e55"
    },
    {
        "repo": "sympy/sympy",
        "instance_id": "sympy__sympy-11788",
        "base_commit": "e1ce41b95534f80955e3809fdf5ada61ecb5946f",
        "patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1452,7 +1452,7 @@ def _print_DiracDelta(self, expr, exp=None):\n     def _print_SingularityFunction(self, expr):\n         shift = self._print(expr.args[0] - expr.args[1])\n         power = self._print(expr.args[2])\n-        tex = r\"{\\langle %s \\rangle}^ %s\" % (shift, power)\n+        tex = r\"{\\langle %s \\rangle}^{%s}\" % (shift, power)\n         return tex\n \n     def _print_Heaviside(self, expr, exp=None):\n",
        "test_patch": "diff --git a/sympy/printing/tests/test_latex.py b/sympy/printing/tests/test_latex.py\n--- a/sympy/printing/tests/test_latex.py\n+++ b/sympy/printing/tests/test_latex.py\n@@ -138,11 +138,12 @@ def test_latex_builtins():\n \n \n def test_latex_SingularityFunction():\n-    assert latex(SingularityFunction(x, 4, 5)) == r\"{\\langle x - 4 \\rangle}^ 5\"\n-    assert latex(SingularityFunction(x, -3, 4)) == r\"{\\langle x + 3 \\rangle}^ 4\"\n-    assert latex(SingularityFunction(x, 0, 4)) == r\"{\\langle x \\rangle}^ 4\"\n-    assert latex(SingularityFunction(x, a, n)) == r\"{\\langle - a + x \\rangle}^ n\"\n-\n+    assert latex(SingularityFunction(x, 4, 5)) == r\"{\\langle x - 4 \\rangle}^{5}\"\n+    assert latex(SingularityFunction(x, -3, 4)) == r\"{\\langle x + 3 \\rangle}^{4}\"\n+    assert latex(SingularityFunction(x, 0, 4)) == r\"{\\langle x \\rangle}^{4}\"\n+    assert latex(SingularityFunction(x, a, n)) == r\"{\\langle - a + x \\rangle}^{n}\"\n+    assert latex(SingularityFunction(x, 4, -2)) == r\"{\\langle x - 4 \\rangle}^{-2}\"\n+    assert latex(SingularityFunction(x, 4, -1)) == r\"{\\langle x - 4 \\rangle}^{-1}\"\n \n def test_latex_cycle():\n     assert latex(Cycle(1, 2, 4)) == r\"\\left( 1\\; 2\\; 4\\right)\"\n",
        "problem_statement": "Singularity function powers do not print correctly in the qtconsole\n``` python\nfrom sympy import symbols, init_printing\nfrom sympy.physics.continuum_mechanics import Beam\n\ninit_printing()\n\nE, I, w, l = symbols('E, I, w, l')\nRa, Ma = symbols('R_a, M_a')\n\n\nb = Beam(2 * l, E, I)\n\nb.apply_load(Ra, 0, -1)\nb.apply_load(-Ma, 0, -2)\nb.apply_load(-w * l, l, -1)\nb.apply_load(-w / l, l, 1)\nb.apply_load(-w * l**2 / 2, 2 * l, -2)\nb.load\n```\n\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image shows a Jupyter notebook cell with Python code using SymPy and SymPy's Continuum Mechanics module. The code imports necessary modules, defines symbols, initializes printing, creates a beam object, applies loads to the beam, and solves for reaction loads. The output displays the reaction loads as a dictionary with keys 'M_a' and 'R_a' and their corresponding values 'M_a' and 'R_a'. The next cell shows the beam's load expression with singularity functions, but the powers of the singularity functions do not print correctly in the qtconsole.\n- **Analysis**: \nThis image shows a Jupyter notebook session where a user is working with the SymPy library to model a beam in continuum mechanics. The code snippet demonstrates the application of various loads to the beam and the subsequent calculation of reaction loads. The issue being reported is that singularity function powers do not print correctly in the qtconsole. This image is directly connected to the issue as it provides a clear example of the problem. The technical value of this image lies in the demonstration of the incorrect printing of singularity function powers, which is crucial for understanding the nature of the bug. The documentation importance of this image is significant as it provides a concrete example that developers can use to reproduce and debug the issue.\n---\n\n@sampadsaha5 \n\n\n### Issue Summary (Structured)\n- **problemSummary**: Singularity function powers do not print correctly in the qtconsole.\n- **context**: The user is using SymPy with the `continuum_mechanics` module to apply loads to a beam and solve for reaction loads. The issue arises when printing the singularity function powers, which appear incorrect in the qtconsole.\n- **stepsToReproduce**: ['Import the necessary modules: `symbols`, `init_printing`, `Beam`.', 'Use `symbols` to define the variables `E, I, w, l, Ra, Ma`.', 'Initialize printing with `init_printing()`.', 'Create a beam object `b` using `Beam(2 * l, E, I)`.', 'Apply various loads to the beam using `b.apply_load()`.', 'Print the load applied to the beam with `b.load`.']\n- **expectedResults**: The singularity function powers should print correctly in the qtconsole.\n- **actualResults**: The singularity function powers do not print correctly in the qtconsole.\n- **supplementaryImages**: ['Code blocks showing the setup and the incorrect printing of the singularity function powers.']",
        "hints_text": "This is also the case in the notebook:\n![selection_069](https://cloud.githubusercontent.com/assets/276007/19817720/aa91d698-9d01-11e6-9716-4604b1c16cf9.jpg)\n\nThe latex printer simply needs to have curly braces around the exponent.\n",
        "created_at": "2016-10-29T21:33:54Z",
        "version": "1.0",
        "FAIL_TO_PASS": "[\"test_latex_SingularityFunction\"]",
        "PASS_TO_PASS": "[\"test_printmethod\", \"test_latex_basic\", \"test_latex_builtins\", \"test_latex_cycle\", \"test_latex_permutation\", \"test_latex_Float\", \"test_latex_symbols\", \"test_hyper_printing\", \"test_latex_bessel\", \"test_latex_fresnel\", \"test_latex_brackets\", \"test_latex_subs\", \"test_latex_integrals\", \"test_latex_sets\", \"test_latex_Range\", \"test_latex_sequences\", \"test_latex_intervals\", \"test_latex_AccumuBounds\", \"test_latex_emptyset\", \"test_latex_commutator\", \"test_latex_union\", \"test_latex_symmetric_difference\", \"test_latex_Complement\", \"test_latex_Complexes\", \"test_latex_productset\", \"test_latex_Naturals\", \"test_latex_Naturals0\", \"test_latex_Integers\", \"test_latex_ImageSet\", \"test_latex_ConditionSet\", \"test_latex_ComplexRegion\", \"test_latex_Contains\", \"test_latex_sum\", \"test_latex_product\", \"test_latex_limits\", \"test_issue_3568\", \"test_latex\", \"test_latex_dict\", \"test_latex_list\", \"test_latex_rational\", \"test_latex_inverse\", \"test_latex_DiracDelta\", \"test_latex_Heaviside\", \"test_latex_KroneckerDelta\", \"test_latex_LeviCivita\", \"test_mode\", \"test_latex_Piecewise\", \"test_latex_Matrix\", \"test_latex_mul_symbol\", \"test_latex_issue_4381\", \"test_latex_issue_4576\", \"test_latex_pow_fraction\", \"test_noncommutative\", \"test_latex_order\", \"test_latex_Lambda\", \"test_latex_PolyElement\", \"test_latex_FracElement\", \"test_latex_Poly\", \"test_latex_ComplexRootOf\", \"test_latex_RootSum\", \"test_settings\", \"test_latex_numbers\", \"test_lamda\", \"test_custom_symbol_names\", \"test_matAdd\", \"test_matMul\", \"test_latex_MatrixSlice\", \"test_latex_RandomDomain\", \"test_PrettyPoly\", \"test_integral_transforms\", \"test_PolynomialRingBase\", \"test_categories\", \"test_Modules\", \"test_QuotientRing\", \"test_Tr\", \"test_Adjoint\", \"test_Hadamard\", \"test_ZeroMatrix\", \"test_boolean_args_order\", \"test_imaginary\", \"test_builtins_without_args\", \"test_latex_greek_functions\", \"test_translate\", \"test_other_symbols\", \"test_modifiers\", \"test_greek_symbols\", \"test_builtin_no_args\", \"test_issue_6853\", \"test_Mul\", \"test_Pow\", \"test_issue_7180\", \"test_issue_8409\", \"test_issue_7117\", \"test_issue_2934\"]",
        "environment_setup_commit": "50b81f9f6be151014501ffac44e5dc6b2416938f"
    },
    {
        "repo": "sympy/sympy",
        "instance_id": "sympy__sympy-24723",
        "base_commit": "671d41cb624388df6a5ae0f3e0ff24f710684cc3",
        "patch": "diff --git a/sympy/stats/matrix_distributions.py b/sympy/stats/matrix_distributions.py\n--- a/sympy/stats/matrix_distributions.py\n+++ b/sympy/stats/matrix_distributions.py\n@@ -450,7 +450,7 @@ def pdf(self, x):\n                     \"or MatrixSymbol\" % str(x))\n         term1 = Inverse(V)*Transpose(x - M)*Inverse(U)*(x - M)\n         num = exp(-Trace(term1)/S(2))\n-        den = (2*pi)**(S(n*p)/2) * Determinant(U)**S(p)/2 * Determinant(V)**S(n)/2\n+        den = (2*pi)**(S(n*p)/2) * Determinant(U)**(S(p)/2) * Determinant(V)**(S(n)/2)\n         return num/den\n \n def MatrixNormal(symbol, location_matrix, scale_matrix_1, scale_matrix_2):\n@@ -482,11 +482,11 @@ def MatrixNormal(symbol, location_matrix, scale_matrix_1, scale_matrix_2):\n     >>> M = MatrixNormal('M', [[1, 2]], [1], [[1, 0], [0, 1]])\n     >>> X = MatrixSymbol('X', 1, 2)\n     >>> density(M)(X).doit()\n-    2*exp(-Trace((Matrix([\n+    exp(-Trace((Matrix([\n     [-1],\n-    [-2]]) + X.T)*(Matrix([[-1, -2]]) + X))/2)/pi\n+    [-2]]) + X.T)*(Matrix([[-1, -2]]) + X))/2)/(2*pi)\n     >>> density(M)([[3, 4]]).doit()\n-    2*exp(-4)/pi\n+    exp(-4)/(2*pi)\n \n     References\n     ==========\n",
        "test_patch": "diff --git a/sympy/stats/tests/test_matrix_distributions.py b/sympy/stats/tests/test_matrix_distributions.py\n--- a/sympy/stats/tests/test_matrix_distributions.py\n+++ b/sympy/stats/tests/test_matrix_distributions.py\n@@ -79,16 +79,16 @@ def test_MatrixNormal():\n     X = MatrixSymbol('X', 1, 2)\n     term1 = exp(-Trace(Matrix([[ S(2)/3, -S(1)/3], [-S(1)/3, S(2)/3]])*(\n             Matrix([[-5], [-6]]) + X.T)*Matrix([[S(1)/4]])*(Matrix([[-5, -6]]) + X))/2)\n-    assert density(M)(X).doit() == term1/(24*pi)\n-    assert density(M)([[7, 8]]).doit() == exp(-S(1)/3)/(24*pi)\n+    assert density(M)(X).doit() == (sqrt(3)) * term1/(24*pi)\n+    assert density(M)([[7, 8]]).doit() == sqrt(3)*exp(-S(1)/3)/(24*pi)\n     d, n = symbols('d n', positive=True, integer=True)\n     SM2 = MatrixSymbol('SM2', d, d)\n     SM1 = MatrixSymbol('SM1', n, n)\n     LM = MatrixSymbol('LM', n, d)\n     Y = MatrixSymbol('Y', n, d)\n     M = MatrixNormal('M', LM, SM1, SM2)\n-    exprd = 4*(2*pi)**(-d*n/2)*exp(-Trace(SM2**(-1)*(-LM.T + Y.T)*SM1**(-1)*(-LM + Y)\n-        )/2)*Determinant(SM1)**(-d)*Determinant(SM2)**(-n)\n+    exprd = (2*pi)**(-d*n/2)*exp(-Trace(SM2**(-1)*(-LM.T + Y.T)*SM1**(-1)*(-LM + Y)\n+        )/2)*Determinant(SM1)**(-d/2)*Determinant(SM2)**(-n/2)\n     assert density(M)(Y).doit() == exprd\n     raises(ValueError, lambda: density(M)(1))\n     raises(ValueError, lambda: MatrixNormal('M', [1, 2], [[1, 0], [0, 1]], [[1, 0], [2, 1]]))\n",
        "problem_statement": "Stats: Matrix Normal Distribution returns wrong probability density function\nAs explained on the [Wikipedia page](https://en.wikipedia.org/wiki/Matrix_normal_distribution), the PDF of Matrix Normal Distribution is as follows: \r\n\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image displays the probability density function (PDF) of the Matrix Normal Distribution. The function is given as p(X | M, U, V) = exp(-1/2 * tr[V^(-1)(X - M)^T U^(-1)(X - M)]) / (2\u03c0)^(np/2) |V|^(n/2) |U|^(p/2), where X is a matrix variable, M is the mean matrix, U is the row covariance matrix, and V is the column covariance matrix. The expression involves the exponential function, the trace of a matrix, and determinants of matrices. This image is relevant to the issue because it shows the correct mathematical form of the PDF that the user expects from the Sympy library.\n- **Analysis**: \n\n---\r\n\r\nWhen initializing a matrix Normal Distribution in Sympy with simple parameters (as mentioned in the docs), the PDF you get is:\r\n\r\n```\r\n>>> from sympy import MatrixSymbol\r\n>>> from sympy.stats import density, MatrixNormal\r\n>>> M = MatrixNormal('M', [[1, 2]], [1], [[1, 0], [0, 1]])\r\n>>> X = MatrixSymbol('X', 1, 2)\r\n>>> density(M)(X).doit()\r\n\r\n       \u239b\u239b\u23a1-1\u23a4    T\u239e                \u239e\r\n   -tr \u239c\u239c\u23a2  \u23a5 + X \u239f \u22c5([-1  -2] + X)\u239f\r\n       \u239d\u239d\u23a3-2\u23a6     \u23a0                \u23a0\r\n    \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n                  2\r\n2\u212f\r\n \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n                 \u03c0\r\n\r\n```\r\n\r\n\r\nWhereas the actual PDF should be:\r\n\r\n```\r\n\r\n       \u239b\u239b\u23a1-1\u23a4    T\u239e                \u239e\r\n   -tr \u239c\u239c\u23a2  \u23a5 + X \u239f \u22c5([-1  -2] + X)\u239f\r\n       \u239d\u239d\u23a3-2\u23a6     \u23a0                \u23a0\r\n   \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n                  2\r\n\u212f\r\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n                 2\u03c0\r\n\r\n```\r\nReferences:\r\nhttps://en.wikipedia.org/wiki/Matrix_normal_distribution\r\nThe difference is in the constant of the PDF and should be a simple issue to solve.\n\n### Issue Summary (Structured)\n- **problemSummary**: The Matrix Normal Distribution in Sympy returns an incorrect probability density function.\n- **context**: The issue arises when initializing a Matrix Normal Distribution with simple parameters. The expected density function does not match the actual output.\n- **expectedResults**: The expected density function is as shown on the Wikipedia page for Matrix Normal Distribution.\n- **actualResults**: The actual density function differs in the constant term from the expected one.\n- **additionalNotes**: The difference is in the constant of the PDF, which should be a simple issue to solve.",
        "hints_text": "",
        "created_at": "2023-02-15T10:48:06Z",
        "version": "1.12",
        "FAIL_TO_PASS": "[\"test_MatrixNormal\"]",
        "PASS_TO_PASS": "[\"test_MatrixPSpace\", \"test_MatrixGamma\", \"test_Wishart\", \"test_MatrixStudentT\"]",
        "environment_setup_commit": "c6cb7c5602fa48034ab1bd43c2347a7e8488f12e"
    },
    {
        "repo": "plotly/plotly.py",
        "instance_id": "plotly__plotly.py-1966",
        "base_commit": "ca464c1dbb9a05ed4fcf185aff0c35dfa2a2bc91",
        "patch": "diff --git a/packages/python/plotly/plotly/express/_core.py b/packages/python/plotly/plotly/express/_core.py\nindex 1cecba9ba8..849b874f00 100644\n--- a/packages/python/plotly/plotly/express/_core.py\n+++ b/packages/python/plotly/plotly/express/_core.py\n@@ -1267,7 +1267,9 @@ def make_figure(args, constructor, trace_patch={}, layout_patch={}):\n                 if m.facet == \"row\":\n                     row = m.val_map[val]\n                     if args[\"facet_row\"] and len(row_labels) < row:\n-                        row_labels.append(args[\"facet_row\"] + \"=\" + str(val))\n+                        row_labels.append(\n+                            get_label(args, args[\"facet_row\"]) + \"=\" + str(val)\n+                        )\n                 else:\n                     if (\n                         bool(args.get(\"marginal_x\", False))\n@@ -1282,7 +1284,9 @@ def make_figure(args, constructor, trace_patch={}, layout_patch={}):\n                 if m.facet == \"col\":\n                     col = m.val_map[val]\n                     if args[\"facet_col\"] and len(col_labels) < col:\n-                        col_labels.append(args[\"facet_col\"] + \"=\" + str(val))\n+                        col_labels.append(\n+                            get_label(args, args[\"facet_col\"]) + \"=\" + str(val)\n+                        )\n                     if facet_col_wrap:  # assumes no facet_row, no marginals\n                         row = 1 + ((col - 1) // facet_col_wrap)\n                         col = 1 + ((col - 1) % facet_col_wrap)\n",
        "test_patch": "diff --git a/packages/python/plotly/plotly/tests/test_core/test_px/test_px.py b/packages/python/plotly/plotly/tests/test_core/test_px/test_px.py\nindex b644040a5f..736c74461c 100644\n--- a/packages/python/plotly/plotly/tests/test_core/test_px/test_px.py\n+++ b/packages/python/plotly/plotly/tests/test_core/test_px/test_px.py\n@@ -53,6 +53,30 @@ def test_custom_data_scatter():\n     )\n \n \n+def test_labels():\n+    tips = px.data.tips()\n+    fig = px.scatter(\n+        tips,\n+        x=\"total_bill\",\n+        y=\"tip\",\n+        facet_row=\"time\",\n+        facet_col=\"day\",\n+        color=\"size\",\n+        symbol=\"sex\",\n+        labels={c: c[::-1] for c in tips.columns},\n+    )\n+    assert \"xes\" in fig.data[0].hovertemplate\n+    assert \"llib_latot\" in fig.data[0].hovertemplate\n+    assert \"ezis\" in fig.data[0].hovertemplate\n+    assert \"yad\" in fig.data[0].hovertemplate\n+    assert \"emit\" in fig.data[0].hovertemplate\n+    assert fig.data[0].name.startswith(\"xes\")\n+    assert fig.layout.xaxis.title.text == \"llib_latot\"\n+    assert fig.layout.coloraxis.colorbar.title.text == \"ezis\"\n+    assert fig.layout.annotations[0].text.startswith(\"yad\")\n+    assert fig.layout.annotations[4].text.startswith(\"emit\")\n+\n+\n def test_px_templates():\n     import plotly.io as pio\n     import plotly.graph_objects as go\n",
        "problem_statement": "PX facet labels don't respect labels kwarg\n```python\r\npx.scatter(tips, x=\"total_bill\", y=\"tip\", facet_row=\"time\",  facet_col=\"day\", \r\n          labels={\"time\": \"THE TIME\", \"day\": \"THE DAY\"})\r\n```\r\n\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image is a scatter plot with multiple facets, showing the relationship between 'total_bill' and 'tip' across different days and times. The x-axis is labeled 'total_bill' and ranges from 8 to 16. The y-axis is labeled 'tip' and ranges from 1 to 6. There are four facets, each representing a different day: Sunday, Saturday, Thursday, and Friday. Each facet is further divided into two sub-facets, representing 'Lunch' and 'Dinner' times. The data points are plotted as blue dots. The labels for 'day' and 'time' are highlighted in red boxes, indicating that they are not respecting the labels keyword argument as intended in the code sample provided.\n- **Analysis**: \nThis image demonstrates a reported issue with the Plotly Express library where facet labels do not respect the labels keyword argument. The scatter plot is intended to show the relationship between 'total_bill' and 'tip' for different days and times, with facet labels set to 'THE TIME' and 'THE DAY'. However, the facet labels still display as 'time' and 'day' instead of the custom labels provided. This image captures the discrepancy between the intended labels and the actual labels displayed, verifying the issue. The technical value lies in the visualization of the data points across different days and times, which helps in understanding the distribution and patterns of tips and total bills. The image is crucial for documenting the issue as it visually represents the problem that developers need to address. Key details to focus on include the facet labels and the data points' distribution across the different days and times.\n---\r\n\r\nReported in https://github.com/plotly/plotly_express/pull/164\n\n### Issue Summary (Structured)\n- **problemSummary**: Facet labels in a scatter plot do not respect the labels keyword argument.\n- **context**: The issue was reported in a GitHub pull request.\n- **stepsToReproduce**: ['Create a scatter plot using Plotly Express.', 'Use the `facet_row` and `facet_col` parameters to create facets.', 'Use the `labels` parameter to specify custom labels for the facets.']\n- **expectedResults**: The facet labels should reflect the custom labels provided in the `labels` parameter.\n- **actualResults**: The facet labels do not change and display the default labels.\n- **supplementaryImages**: ['A scatter plot with facets showing the default labels instead of the custom labels.']\n- **additionalNotes**: The issue was reported in a GitHub pull request, indicating it is a known bug.",
        "hints_text": "",
        "created_at": "2019-12-03T21:40:09Z",
        "version": "4.3.0",
        "FAIL_TO_PASS": "[\"packages/python/plotly/plotly/tests/test_core/test_px/test_px.py::test_labels\"]",
        "PASS_TO_PASS": "[\"packages/python/plotly/plotly/tests/test_core/test_px/test_px.py::test_custom_data_scatter\", \"packages/python/plotly/plotly/tests/test_core/test_px/test_px.py::test_scatter\", \"packages/python/plotly/plotly/tests/test_core/test_px/test_px.py::test_px_templates\"]",
        "environment_setup_commit": "5f87ec48d37b1b1abe09cb38150ca59996abc5cb"
    },
    {
        "repo": "networkx/networkx",
        "instance_id": "networkx__networkx-4378",
        "base_commit": "5b89d27fff628b7c24755c456229bb8100aec36d",
        "patch": "diff --git a/networkx/drawing/nx_pylab.py b/networkx/drawing/nx_pylab.py\nindex b59d6dfde62..1b3733e63b1 100644\n--- a/networkx/drawing/nx_pylab.py\n+++ b/networkx/drawing/nx_pylab.py\n@@ -556,6 +556,19 @@ def draw_networkx_edges(\n        See `matplotlib.patches.ConnectionStyle` and\n        `matplotlib.patches.FancyArrowPatch` for more info.\n \n+    node_size : scalar or array, optional (default=300)\n+       Size of nodes. Though the nodes are not drawn with this function, the\n+       node size is used in determining edge positioning.\n+\n+    nodelist : list, optional (default=G.nodes())\n+       Only draw edges that are in `edgelist` and that lie between nodes in\n+       `nodelist`. Any edges in `edgelist` incident on nodes that are *not* in\n+       `nodelist` will not be drawn.\n+\n+    node_shape :  string, optional (default='o')\n+       The marker used for nodes, used in determining edge positioning.\n+       Specification is as a `matplotlib.markers` marker, e.g. one of 'so^>v<dph8'.\n+\n     label : [None| string]\n        Label for legend\n \n@@ -628,11 +641,15 @@ def draw_networkx_edges(\n     if edgelist is None:\n         edgelist = list(G.edges())\n \n-    if len(edgelist) == 0:  # no edges!\n-        return []\n-\n     if nodelist is None:\n         nodelist = list(G.nodes())\n+    else:\n+        # Remove any edges where both endpoints are not in node list\n+        nodeset = set(nodelist)\n+        edgelist = [(u, v) for u, v in edgelist if (u in nodeset) and (v in nodeset)]\n+\n+    if len(edgelist) == 0:  # no edges!\n+        return []\n \n     # FancyArrowPatch handles color=None different from LineCollection\n     if edge_color is None:\n",
        "test_patch": "diff --git a/networkx/drawing/tests/test_pylab.py b/networkx/drawing/tests/test_pylab.py\nindex 418d5f09481..fac1b467007 100644\n--- a/networkx/drawing/tests/test_pylab.py\n+++ b/networkx/drawing/tests/test_pylab.py\n@@ -312,6 +312,8 @@ def test_draw_edges_min_source_target_margins(node_shape):\n     assert padded_extent[0] > default_extent[0]\n     # And the rightmost extent of the edge, further to the left\n     assert padded_extent[1] < default_extent[1]\n+    # NOTE: Prevent axes objects from impacting other tests via plt.gca\n+    plt.delaxes(ax)\n \n \n def test_apply_alpha():\n@@ -323,3 +325,21 @@ def test_apply_alpha():\n     alpha = 0.5\n     rgba_colors = nx.drawing.nx_pylab.apply_alpha(colorlist, alpha, nodelist)\n     assert all(rgba_colors[:, -1] == alpha)\n+\n+\n+@pytest.mark.parametrize(\n+    (\"nodelist\", \"expected_num_edges\"),\n+    (\n+        ([], 0),\n+        ([1], 0),\n+        ([1, 2], 1),\n+        ([0, 1, 2, 3], 6),\n+    ),\n+)\n+def test_draw_edges_with_nodelist(nodelist, expected_num_edges):\n+    \"\"\"Test that edges that contain a node in `nodelist` are not drawn by\n+    draw_networkx_edges. See gh-4374.\n+    \"\"\"\n+    G = nx.complete_graph(5)\n+    edge_patches = nx.draw_networkx_edges(G, nx.circular_layout(G), nodelist=nodelist)\n+    assert len(edge_patches) == expected_num_edges\n",
        "problem_statement": "Question: behavior of `node_list` kwarg in draw_networkx_edges\nLike the other pylab drawing functions, `nx_pylab.draw_networkx_edges` currently has a `nodelist` keyword argument. It is not included in the `Parameters` listing of the docstring and so it's behavior is not well-defined. \r\n\r\nNaively, I would expect that any edges incident on a node *not* in the node list would not be drawn. For example, I would expect the following:\r\n\r\n```python\r\n>>> G = nx.path_graph(3)\r\n>>> pos = {n: (n, n) for n in range(len(G))}\r\n>>> nx.draw_networkx_nodes(G, pos, nodelist=[0, 1])\r\n>>> nx.draw_networkx_edges(G, pos, nodelist=[0, 1])\r\n```\r\nto produce the following, without the edge (1, 2) since 2 was not included in the nodelist:\r\n\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 1\n- **Contextual Description**: \nThe image shows a simple graph with two nodes connected by a single edge. The nodes are represented by blue circles, and the edge is a straight line connecting the two nodes. The graph is enclosed within a rectangular boundary, indicating the plotting area. The nodes are positioned at the corners of the rectangle, with one node at the bottom left and the other at the top right. The edge runs diagonally from the bottom left node to the top right node. This image represents the expected behavior of the `draw_networkx_edges` function when using the `nodelist` keyword argument to specify which nodes to draw edges for.\n- **Analysis**: \nThis image demonstrates the expected behavior of the `draw_networkx_edges` function when using the `nodelist` keyword argument. It shows a graph with two nodes and a single edge connecting them. The image verifies that the function correctly draws only the edges incident on the nodes specified in the `nodelist`, which in this case are nodes 0 and 1. The absence of node 2 in the `nodelist` results in the edge (1, 2) not being drawn, as expected. This image is necessary for documenting the issue because it visually confirms the expected behavior of the `nodelist` parameter. The technical value lies in the clear depiction of the edge drawing based on the specified nodes, which helps in understanding the functionality and potential issues with the `nodelist` parameter. The image strengthens the issue documentation by providing a visual representation of the expected behavior, making it easier for developers to grasp the problem and focus on the correct implementation of the `nodelist` parameter.\n---\r\n\r\nInstead, the above code results in the following image:\r\n\r\nThis image is part of the problem description. Here is the relevant information:\n**Image Details:**\n---\n- **Image ID**: 2\n- **Contextual Description**: \nThe image depicts a graph with three nodes, where two nodes are connected by an edge, and the third node is not connected to any other nodes. The nodes are represented by blue circles, and the edge is a straight line connecting the two nodes. The graph is enclosed within a rectangular boundary, indicating the plotting area. The nodes are positioned as follows: one node is at the bottom left, another node is at the top right, and the third node is in the middle, slightly to the right of the center. The edge runs diagonally from the bottom left node to the top right node. This image represents the actual behavior of the `draw_networkx_edges` function when using the `nodelist` keyword argument to specify which nodes to draw edges for, where the edge is still drawn even though one of the nodes is not included in the `nodelist`.\n- **Analysis**: \nThis image illustrates the actual behavior of the `draw_networkx_edges` function when using the `nodelist` keyword argument, which is different from the expected behavior. It shows a graph with three nodes and two edges, where the edge (1, 2) is drawn despite node 2 not being included in the `nodelist`. This image captures the discrepancy between the expected and actual behavior of the `nodelist` parameter, highlighting the issue at hand. The technical value of this image lies in its demonstration of the current implementation's flaw, where the `nodelist` parameter does not correctly filter out edges based on the specified nodes. This image is crucial for documenting the issue because it visually confirms the unexpected behavior, making it easier for developers to understand the problem and focus on the necessary corrections to the `nodelist` parameter's functionality.\n---\r\n\r\nIs this expected? Right now, the `nodelist` is only used internally in `draw_networkx_edges` to determine the size of the nodes. Either way, the parameter needs to be added to the docstring and the behavior tested - I just wanted to raise the question about what the desired behavior was in order to do so!\n\n### Issue Summary (Structured)\n- **problemSummary**: Ambiguity in the behavior of the `node_list` keyword argument in `draw_networkx_edges` function.\n- **context**: The `draw_networkx_edges` function in NetworkX currently has an undocumented `node_list` keyword argument. The expected behavior is that edges incident to nodes not included in the node list should not be drawn. However, the actual behavior does not exclude these edges.\n- **stepsToReproduce**: ['Create a path graph with 3 nodes.', 'Define positions for the nodes.', 'Use `draw_networkx_nodes` and `draw_networkx_edges` with a nodelist of [0, 1].']\n- **expectedResults**: Edges incident to nodes not in the nodelist should not be drawn.\n- **actualResults**: Edges incident to nodes not in the nodelist are still drawn.\n- **supplementaryImages**: ['Two images showing the expected and actual behavior of the `draw_networkx_edges` function.']\n- **additionalNotes**: The `nodelist` parameter needs to be added to the docstring, and its behavior tested to clarify the desired functionality.",
        "hints_text": "@rossbar I agree with you.  Edges should only be drawn if both endpoints are in the graph.",
        "created_at": "2020-11-21T22:07:33Z",
        "version": "2.6",
        "FAIL_TO_PASS": "[\"networkx/drawing/tests/test_pylab.py::test_draw_edges_with_nodelist[nodelist0-0]\",\"networkx/drawing/tests/test_pylab.py::test_draw_edges_with_nodelist[nodelist1-0]\",\"networkx/drawing/tests/test_pylab.py::test_draw_edges_with_nodelist[nodelist2-1]\",\"networkx/drawing/tests/test_pylab.py::test_draw_edges_with_nodelist[nodelist3-6]\"]",
        "PASS_TO_PASS": "[\"networkx/drawing/tests/test_pylab.py::TestPylab::test_alpha_iter\", \"networkx/drawing/tests/test_pylab.py::TestPylab::test_draw_empty_nodes_return_values\", \"networkx/drawing/tests/test_pylab.py::test_apply_alpha\", \"networkx/drawing/tests/test_pylab.py::test_draw_edges_min_source_target_margins[s]\", \"networkx/drawing/tests/test_pylab.py::TestPylab::test_np_edgelist\", \"networkx/drawing/tests/test_pylab.py::TestPylab::test_edge_colors_and_widths\", \"networkx/drawing/tests/test_pylab.py::TestPylab::test_axes\", \"networkx/drawing/tests/test_pylab.py::test_draw_nodes_missing_node_from_position\", \"networkx/drawing/tests/test_pylab.py::test_draw_edges_min_source_target_margins[o]\", \"networkx/drawing/tests/test_pylab.py::test_draw_edges_warns_on_arrow_and_arrowstyle\", \"networkx/drawing/tests/test_pylab.py::TestPylab::test_labels_and_colors\", \"networkx/drawing/tests/test_pylab.py::TestPylab::test_multigraph_edgelist_tuples\"]",
        "environment_setup_commit": "d76f3bfa9a26c3956323764d14868bf3ff8f7e24"
    }
]