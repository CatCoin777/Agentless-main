{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-14295", "model_patch": "diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py\nindex cf86591..066c1ec 100644\n--- a/astropy/wcs/wcs.py\n+++ b/astropy/wcs/wcs.py\n@@ -706,50 +706,7 @@ reduce these to 2 dimensions using the naxis kwarg.\n         sub.__doc__ = _wcs.Wcsprm.sub.__doc__\n \n     def _fix_scamp(self):\n-        \"\"\"\n-        Remove SCAMP's PVi_m distortion parameters if SIP distortion parameters\n-        are also present. Some projects (e.g., Palomar Transient Factory)\n-        convert SCAMP's distortion parameters (which abuse the PVi_m cards) to\n-        SIP. However, wcslib gets confused by the presence of both SCAMP and\n-        SIP distortion parameters.\n-\n-        See https://github.com/astropy/astropy/issues/299.\n-        \"\"\"\n-        # Nothing to be done if no WCS attached\n-        if self.wcs is None:\n-            return\n-\n-        # Nothing to be done if no PV parameters attached\n-        pv = self.wcs.get_pv()\n-        if not pv:\n-            return\n-\n-        # Nothing to be done if axes don't use SIP distortion parameters\n-        if self.sip is None:\n-            return\n-\n-        # Nothing to be done if any radial terms are present...\n-        # Loop over list to find any radial terms.\n-        # Certain values of the `j' index are used for storing\n-        # radial terms; refer to Equation (1) in\n-        # <http://web.ipac.caltech.edu/staff/shupe/reprints/SIP_to_PV_SPIE2012.pdf>.\n-        pv = np.asarray(pv)\n-        # Loop over distinct values of `i' index\n-        for i in set(pv[:, 0]):\n-            # Get all values of `j' index for this value of `i' index\n-            js = set(pv[:, 1][pv[:, 0] == i])\n-            # Find max value of `j' index\n-            max_j = max(js)\n-            for j in (3, 11, 23, 39):\n-                if j < max_j and j in js:\n-                    return\n-\n-        self.wcs.set_pv([])\n-        warnings.warn(\n-            \"Removed redundant SCAMP distortion parameters \"\n-            + \"because SIP parameters are also present\",\n-            FITSFixedWarning,\n-        )\n+        pass\n \n     def fix(self, translate_units=\"\", naxis=None):\n         \"\"\"\n"}
{"model_name_or_path": "agentless", "instance_id": "scikit-learn__scikit-learn-13087", "model_patch": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 142eda3..745dd12 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -519,7 +519,7 @@ class _SigmoidCalibration(BaseEstimator, RegressorMixin):\n         return expit(-(self.a_ * T + self.b_))\n \n \n-def calibration_curve(y_true, y_prob, normalize=False, n_bins=5):\n+def calibration_curve(y_true, y_prob, normalize=False, bins=None, n_bins=5):\n     \"\"\"Compute true and predicted probabilities for a calibration curve.\n \n      The method assumes the inputs come from a binary classifier.\n"}
{"model_name_or_path": "agentless", "instance_id": "astropy__astropy-11693", "model_patch": "diff --git a/astropy/wcs/wcsapi/fitswcs.py b/astropy/wcs/wcsapi/fitswcs.py\nindex ce29e86..e2df1a5 100644\n--- a/astropy/wcs/wcsapi/fitswcs.py\n+++ b/astropy/wcs/wcsapi/fitswcs.py\n@@ -323,7 +323,7 @@ class FITSWCSAPIMixin(BaseLowLevelWCS, HighLevelWCSMixin):\n         return world[0] if self.world_n_dim == 1 else tuple(world)\n \n     def world_to_pixel_values(self, *world_arrays):\n-        pixel = self.all_world2pix(*world_arrays, 0)\n+        pixel = self.all_world2pix(*world_arrays, 0, quiet=True)\n         return pixel[0] if self.pixel_n_dim == 1 else tuple(pixel)\n \n     @property\n"}
{"model_name_or_path": "agentless", "instance_id": "networkx__networkx-6503", "model_patch": "diff --git a/networkx/algorithms/tree/operations.py b/networkx/algorithms/tree/operations.py\nindex dfa8a5c..0f96959 100644\n--- a/networkx/algorithms/tree/operations.py\n+++ b/networkx/algorithms/tree/operations.py\n@@ -1,3 +1,4 @@\n+\n \"\"\"Operations on trees.\"\"\"\n from functools import partial\n from itertools import accumulate, chain\n@@ -66,6 +67,8 @@ def join(rooted_trees, label_attribute=None):\n     # Relabel the nodes so that their union is the integers starting at 1.\n     if label_attribute is None:\n         label_attribute = \"_old\"\n+    else:\n+        label_attribute = label_attribute\n     relabel = partial(\n         nx.convert_node_labels_to_integers, label_attribute=label_attribute\n     )\n@@ -103,4 +106,4 @@ def join(rooted_trees, label_attribute=None):\n     R.add_node(0)\n     R.add_edges_from((0, root) for root in roots)\n \n-    return R\n+    return R\n"}
{"model_name_or_path": "agentless", "instance_id": "networkx__networkx-5616", "model_patch": "diff --git a/networkx/algorithms/euler.py b/networkx/algorithms/euler.py\nindex 5b844cf..c1520d0 100644\n--- a/networkx/algorithms/euler.py\n+++ b/networkx/algorithms/euler.py\n@@ -292,7 +292,7 @@ def has_eulerian_path(G, source=None):\n             return False\n \n         # Sum is 2 since we know it is not eulerian (which implies sum is 0)\n-        return sum(d % 2 == 1 for v, d in G.degree()) == 2 and nx.is_connected(G)\n+        return sum(d % 2 == 1 for v, d in G.degree()) == 2\n \n \n def eulerian_path(G, source=None, keys=False):\n"}
{"model_name_or_path": "agentless", "instance_id": "networkx__networkx-4378", "model_patch": "diff --git a/networkx/drawing/nx_pylab.py b/networkx/drawing/nx_pylab.py\nindex 306bca5..d922536 100644\n--- a/networkx/drawing/nx_pylab.py\n+++ b/networkx/drawing/nx_pylab.py\n@@ -633,6 +633,8 @@ def draw_networkx_edges(\n \n     if nodelist is None:\n         nodelist = list(G.nodes())\n+    else:\n+        nodelist = [n for n in nodelist if n in G.nodes()]\n \n     # FancyArrowPatch handles color=None different from LineCollection\n     if edge_color is None:\n"}
